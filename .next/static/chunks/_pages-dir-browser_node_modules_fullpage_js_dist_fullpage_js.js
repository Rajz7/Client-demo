/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_pages-dir-browser_node_modules_fullpage_js_dist_fullpage_js"],{

/***/ "(pages-dir-browser)/./node_modules/fullpage.js/dist/fullpage.js":
/*!***************************************************!*\
  !*** ./node_modules/fullpage.js/dist/fullpage.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/*!\n* fullPage 4.0.37\n* https://github.com/alvarotrigo/fullPage.js\n*\n* @license GPLv3 for open source use only\n* or Fullpage Commercial License for commercial use\n* http://alvarotrigo.com/fullPage/pricing/\n*\n* Copyright (C) 2018 http://alvarotrigo.com/fullPage - A project by Alvaro Trigo\n*/\n\n(function (global, factory) {\n     true ? module.exports = factory() :\n    0;\n})(this, (function () { 'use strict';\n\n    // https://tc39.github.io/ecma262/#sec-array.prototype.find\n    if (!Array.prototype.find) {\n      Object.defineProperty(Array.prototype, 'find', {\n        value: function value(predicate) {\n          // 1. Let O be ? ToObject(this value).\n          if (this == null) {\n            throw new TypeError('\"this\" is null or not defined');\n          }\n\n          var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n          var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n\n          if (typeof predicate !== 'function') {\n            throw new TypeError('predicate must be a function');\n          } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n          var thisArg = arguments[1]; // 5. Let k be 0.\n\n          var k = 0; // 6. Repeat, while k < len\n\n          while (k < len) {\n            // a. Let Pk be ! ToString(k).\n            // b. Let kValue be ? Get(O, Pk).\n            // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n            // d. If testResult is true, return kValue.\n            var kValue = o[k];\n\n            if (predicate.call(thisArg, kValue, k, o)) {\n              return kValue;\n            } // e. Increase k by 1.\n\n\n            k++;\n          } // 7. Return undefined.\n\n\n          return undefined;\n        }\n      });\n    }\n\n    // Production steps of ECMA-262, Edition 6, 22.1.2.1\n    if (!Array.from) {\n      Array.from = function () {\n        var toStr = Object.prototype.toString;\n\n        var isCallable = function isCallable(fn) {\n          return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n        };\n\n        var toInteger = function toInteger(value) {\n          var number = Number(value);\n\n          if (isNaN(number)) {\n            return 0;\n          }\n\n          if (number === 0 || !isFinite(number)) {\n            return number;\n          }\n\n          return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n        };\n\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n\n        var toLength = function toLength(value) {\n          var len = toInteger(value);\n          return Math.min(Math.max(len, 0), maxSafeInteger);\n        }; // The length property of the from method is 1.\n\n\n        return function from(arrayLike\n        /*, mapFn, thisArg */\n        ) {\n          // 1. Let C be the this value.\n          var C = this; // 2. Let items be ToObject(arrayLike).\n\n          var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).\n\n          if (arrayLike == null) {\n            throw new TypeError('Array.from requires an array-like object - not null or undefined');\n          } // 4. If mapfn is undefined, then let mapping be false.\n\n\n          var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n          var T;\n\n          if (typeof mapFn !== 'undefined') {\n            // 5. else\n            // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n            if (!isCallable(mapFn)) {\n              throw new TypeError('Array.from: when provided, the second argument must be a function');\n            } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n            if (arguments.length > 2) {\n              T = arguments[2];\n            }\n          } // 10. Let lenValue be Get(items, \"length\").\n          // 11. Let len be ToLength(lenValue).\n\n\n          var len = toLength(items.length); // 13. If IsConstructor(C) is true, then\n          // 13. a. Let A be the result of calling the [[Construct]] internal method\n          // of C with an argument list containing the single item len.\n          // 14. a. Else, Let A be ArrayCreate(len).\n\n          var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.\n\n          var k = 0; // 17. Repeat, while k < len… (also steps a - h)\n\n          var kValue;\n\n          while (k < len) {\n            kValue = items[k];\n\n            if (mapFn) {\n              A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n            } else {\n              A[k] = kValue;\n            }\n\n            k += 1;\n          } // 18. Let putStatus be Put(A, \"length\", len, true).\n\n\n          A.length = len; // 20. Return A.\n\n          return A;\n        };\n      }();\n    }\n\n    var win = window;\n    var doc = document;\n    var isTouchDevice = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/) || navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document; // iPad on iOS 13 detection\n\n    var isMacDevice = /(Mac|iPhone|iPod|iPad)/i.test(win.navigator.userAgent); // @ts-ignore\n\n    var isTouch = 'ontouchstart' in win || navigator.msMaxTouchPoints > 0 || navigator.maxTouchPoints;\n    var isIE11 = !!window.MSInputMethodContext && !!document.documentMode; // taken from https://github.com/udacity/ud891/blob/gh-pages/lesson2-focus/07-modals-and-keyboard-traps/solution/modal.js\n\n    var focusableElementsString = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex=\"0\"], summary:not([disabled]), [contenteditable]'; // cache common elements\n\n    var FP = {\n      test: {},\n      shared: {}\n    };\n    var extensions = ['parallax', 'scrollOverflowReset', 'dragAndMove', 'offsetSections', 'fadingEffect', 'responsiveSlides', 'continuousHorizontal', 'interlockedSlides', 'scrollHorizontally', 'resetSliders', 'cards', 'dropEffect', 'waterEffect'];\n    var isInsideIframe = function () {\n      var inIframe = window.self !== window.top;\n      return function () {\n        return inIframe;\n      };\n    }();\n\n    /**\n    * forEach polyfill for IE\n    * https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Browser_Compatibility\n    */\n\n    if (win.NodeList && !NodeList.prototype.forEach) {\n      NodeList.prototype.forEach = function (callback, thisArg) {\n        thisArg = thisArg || window;\n\n        for (var i = 0; i < this.length; i++) {\n          callback.call(thisArg, this[i], i, this);\n        }\n      };\n    }\n\n    if (typeof Object.assign != 'function') {\n      // Must be writable: true, enumerable: false, configurable: true\n      Object.defineProperty(Object, 'assign', {\n        value: function assign(target, varArgs) {\n\n          if (target == null) {\n            // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n          }\n\n          var to = Object(target);\n\n          for (var index = 1; index < arguments.length; index++) {\n            var nextSource = arguments[index];\n\n            if (nextSource != null) {\n              // Skip over if undefined or null\n              for (var nextKey in nextSource) {\n                // Avoid bugs when hasOwnProperty is shadowed\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                  to[nextKey] = nextSource[nextKey];\n                }\n              }\n            }\n          }\n\n          return to;\n        },\n        writable: true,\n        configurable: true\n      });\n    }\n\n    // https://stackoverflow.com/questions/51719553/padstart-not-working-in-ie11\n    // https://github.com/behnammodi/polyfill/blob/master/string.polyfill.js\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n    if (!String.prototype.padStart) {\n      String.prototype.padStart = function padStart(targetLength, padString) {\n        targetLength = targetLength >> 0; //truncate if number or convert non-number to 0;\n\n        padString = String(typeof padString !== 'undefined' ? padString : ' ');\n\n        if (this.length > targetLength) {\n          return String(this);\n        } else {\n          targetLength = targetLength - this.length;\n\n          if (targetLength > padString.length) {\n            padString += Array.apply(null, Array(targetLength)).map(function () {\n              return padString;\n            }).join(\"\");\n          }\n\n          return padString.slice(0, targetLength) + String(this);\n        }\n      };\n    }\n\n    //utils\n    /**\n    * Shows a message in the console of the given type.\n    */\n\n    function showError(type, text) {\n      win.console && win.console[type] && win.console[type]('fullPage: ' + text);\n    }\n    function isVisible(el) {\n      var style = win.getComputedStyle(el);\n      return style.display !== 'none';\n    }\n    function getVisible(elements) {\n      return Array.from(elements).filter(function (e) {\n        return isVisible(e);\n      });\n    }\n    /**\n    * Equivalent of jQuery function $().\n    */\n\n    function $(selector, context) {\n      context = arguments.length > 1 ? context : document;\n      return context ? context.querySelectorAll(selector) : null;\n    }\n    /**\n    * Extends a given Object properties and its childs.\n    */\n\n    function deepExtend(out) {\n      out = out || {};\n\n      for (var i = 1, len = arguments.length; i < len; ++i) {\n        var obj = arguments[i];\n\n        if (!obj) {\n          continue;\n        }\n\n        for (var key in obj) {\n          if (!obj.hasOwnProperty(key) || key == '__proto__' || key == 'constructor') {\n            continue;\n          } // based on https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n\n\n          if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n            out[key] = deepExtend(out[key], obj[key]);\n            continue;\n          }\n\n          out[key] = obj[key];\n        }\n      }\n\n      return out;\n    }\n    /**\n    * Checks if the passed element contains the passed class.\n    */\n\n    function hasClass(el, className) {\n      if (el == null) {\n        return false;\n      }\n\n      return el.classList.contains(className);\n    }\n    /**\n    * Gets the window height. Crossbrowser.\n    */\n\n    function getWindowHeight() {\n      return 'innerHeight' in win ? win.innerHeight : doc.documentElement.offsetHeight;\n    }\n    /**\n    * Gets the window width.\n    */\n\n    function getWindowWidth() {\n      return win.innerWidth;\n    }\n    /**\n    * Set's the CSS properties for the passed item/s.\n    * @param {NodeList|HTMLElement|Object} items\n    * @param {Object} props css properties and values.\n    */\n\n    function css(items, props) {\n      items = getList(items);\n      var key;\n\n      for (key in props) {\n        if (props.hasOwnProperty(key)) {\n          if (key !== null) {\n            for (var i = 0; i < items.length; i++) {\n              var item = items[i];\n              item.style[key] = props[key];\n            }\n          }\n        }\n      }\n\n      return items;\n    }\n    /**\n    * Gets the previous element to the passed element.\n    */\n\n    function prev(item) {\n      return item.previousElementSibling;\n    }\n    /**\n    * Gets the next element to the passed element.\n    */\n\n    function next(item) {\n      return item.nextElementSibling;\n    }\n    /**\n    * Gets the last element from the passed list of elements.\n    */\n\n    function last(item) {\n      return item[item.length - 1];\n    }\n    /**\n    * Gets index from the passed element.\n    * @param {String} selector is optional.\n    */\n\n    function index(item, selector) {\n      item = isArrayOrList(item) ? item[0] : item;\n      var children = selector != null ? $(selector, item.parentNode) : item.parentNode.childNodes;\n      var num = 0;\n\n      for (var i = 0; i < children.length; i++) {\n        if (children[i] == item) return num;\n        if (children[i].nodeType == 1) num++;\n      }\n\n      return -1;\n    }\n    /**\n    * Gets an iterable element for the passed element/s\n    */\n\n    function getList(item) {\n      return !isArrayOrList(item) ? [item] : item;\n    }\n    /**\n    * Adds the display=none property for the passed element/s\n    */\n\n    function hide(el) {\n      el = getList(el);\n\n      for (var i = 0; i < el.length; i++) {\n        el[i].style.display = 'none';\n      }\n\n      return el;\n    }\n    /**\n    * Adds the display=block property for the passed element/s\n    */\n\n    function show(el) {\n      el = getList(el);\n\n      for (var i = 0; i < el.length; i++) {\n        el[i].style.display = 'block';\n      }\n\n      return el;\n    }\n    /**\n    * Checks if the passed element is an iterable element or not\n    */\n\n    function isArrayOrList(el) {\n      return Object.prototype.toString.call(el) === '[object Array]' || Object.prototype.toString.call(el) === '[object NodeList]';\n    }\n    /**\n    * Adds the passed class to the passed element/s\n    */\n\n    function addClass(el, className) {\n      el = getList(el);\n\n      for (var i = 0; i < el.length; i++) {\n        var item = el[i];\n        item.classList.add(className);\n      }\n\n      return el;\n    }\n    /**\n    * Removes the passed class to the passed element/s\n    * @param {String} `className` can be multiple classnames separated by whitespace\n    */\n\n    function removeClass(el, className) {\n      el = getList(el);\n      var classNames = className.split(' ');\n\n      for (var a = 0; a < classNames.length; a++) {\n        className = classNames[a];\n\n        for (var i = 0; i < el.length; i++) {\n          var item = el[i];\n          item.classList.remove(className);\n        }\n      }\n\n      return el;\n    }\n    /**\n    * Appends the given element ot the given parent.\n    */\n\n    function appendTo(el, parent) {\n      parent.appendChild(el);\n    }\n    /**\n    Usage:\n\n    var wrapper = document.createElement('div');\n    wrapper.className = 'fp-slides';\n    wrap($('.slide'), wrapper);\n\n    https://jsfiddle.net/qwzc7oy3/15/ (vanilla)\n    https://jsfiddle.net/oya6ndka/1/ (jquery equivalent)\n    */\n\n    function wrap(toWrap, wrapper, isWrapAll) {\n      var newParent;\n      wrapper = wrapper || doc.createElement('div');\n\n      for (var i = 0; i < toWrap.length; i++) {\n        var item = toWrap[i];\n\n        if (isWrapAll && !i || !isWrapAll) {\n          newParent = wrapper.cloneNode(true);\n          item.parentNode.insertBefore(newParent, item);\n        }\n\n        newParent.appendChild(item);\n      }\n\n      return toWrap;\n    }\n    /**\n    Usage:\n    var wrapper = document.createElement('div');\n    wrapper.className = 'fp-slides';\n    wrap($('.slide'), wrapper);\n\n    https://jsfiddle.net/qwzc7oy3/27/ (vanilla)\n    https://jsfiddle.net/oya6ndka/4/ (jquery equivalent)\n    */\n\n    function wrapAll(toWrap, wrapper) {\n      wrap(toWrap, wrapper, true);\n    }\n    /**\n    * Usage:\n    * wrapInner(document.querySelector('#pepe'), '<div class=\"test\">afdas</div>');\n    * wrapInner(document.querySelector('#pepe'), element);\n    *\n    * https://jsfiddle.net/zexxz0tw/6/\n    *\n    * https://stackoverflow.com/a/21817590/1081396\n    */\n\n    function wrapInner(parent, wrapper) {\n      parent.appendChild(wrapper);\n\n      while (parent.firstChild !== wrapper) {\n        wrapper.appendChild(parent.firstChild);\n      }\n    }\n    /**\n    * Usage:\n    * unwrap(document.querySelector('#pepe'));\n    * unwrap(element);\n    *\n    * https://jsfiddle.net/szjt0hxq/1/\n    *\n    */\n\n    function unwrap(wrapper) {\n      var wrapperContent = doc.createDocumentFragment();\n\n      while (wrapper.firstChild) {\n        wrapperContent.appendChild(wrapper.firstChild);\n      }\n\n      wrapper.parentNode.replaceChild(wrapperContent, wrapper);\n    }\n    /**\n    * http://stackoverflow.com/questions/22100853/dom-pure-javascript-solution-to-jquery-closest-implementation\n    * Returns the element or `false` if there's none\n    */\n\n    function closest(el, selector) {\n      if (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n          return el;\n        }\n\n        return closest(el.parentNode, selector);\n      }\n\n      return null;\n    }\n    /**\n    * Places one element (rel) after another one or group of them (reference).\n    * @param {HTMLElement} reference\n    * @param {HTMLElement|NodeList|String|Array} el\n    * https://jsfiddle.net/9s97hhzv/1/\n    */\n\n    function after(reference, el) {\n      insertBefore(reference, reference.nextSibling, el);\n    }\n    /**\n    * Places one element (rel) before another one or group of them (reference).\n    * @param {HTMLElement} reference\n    * @param {HTMLElement|NodeList|String|Array} el\n    * https://jsfiddle.net/9s97hhzv/1/\n    */\n\n    function before(reference, el) {\n      insertBefore(reference, reference, el);\n    }\n    /**\n    * Based in https://stackoverflow.com/a/19316024/1081396\n    * and https://stackoverflow.com/a/4793630/1081396\n    */\n\n    function insertBefore(reference, beforeElement, el) {\n      if (!isArrayOrList(el)) {\n        if (typeof el == 'string') {\n          el = createElementFromHTML(el);\n        }\n\n        el = [el];\n      }\n\n      for (var i = 0; i < el.length; i++) {\n        reference.parentNode.insertBefore(el[i], beforeElement);\n      }\n    } //http://stackoverflow.com/questions/3464876/javascript-get-window-x-y-position-for-scroll\n\n    function getScrollTop() {\n      var docElement = doc.documentElement;\n      return (win.pageYOffset || docElement.scrollTop) - (docElement.clientTop || 0);\n    }\n    /**\n    * Gets the siblings of the passed element\n    */\n\n    function siblings(el) {\n      return Array.prototype.filter.call(el.parentNode.children, function (child) {\n        return child !== el;\n      });\n    }\n    function preventDefault(event) {\n      event.preventDefault();\n    }\n    function getAttr(el, attr) {\n      return el.getAttribute(attr);\n    }\n    function docAddEvent(event, callback, options) {\n      doc.addEventListener(event, callback, options === 'undefined' ? null : options);\n    }\n    function windowAddEvent(event, callback, options) {\n      win.addEventListener(event, callback, options === 'undefined' ? null : options);\n    }\n    function docRemoveEvent(event, callback, options) {\n      doc.removeEventListener(event, callback, options === 'undefined' ? null : options);\n    }\n    function windowRemoveEvent(event, callback, options) {\n      win.removeEventListener(event, callback, options === 'undefined' ? null : options);\n    }\n    /**\n    * Determines whether the passed item is of function type.\n    */\n\n    function isFunction(item) {\n      if (typeof item === 'function') {\n        return true;\n      }\n\n      var type = Object.prototype.toString.call(item);\n      return type === '[object Function]' || type === '[object GeneratorFunction]';\n    }\n    /**\n    * Trigger custom events\n    */\n\n    function trigger(el, eventName, data) {\n      var event;\n      data = typeof data === 'undefined' ? {} : data; // Native\n\n      if (typeof win.CustomEvent === \"function\") {\n        event = new CustomEvent(eventName, {\n          detail: data\n        });\n      } else {\n        event = doc.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, true, true, data);\n      }\n\n      el.dispatchEvent(event);\n    }\n    /**\n    * Polyfill of .matches()\n    */\n\n    function matches(el, selector) {\n      return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n    }\n    /**\n    * Toggles the visibility of the passed element el.\n    */\n\n    function toggle(el, value) {\n      if (typeof value === \"boolean\") {\n        for (var i = 0; i < el.length; i++) {\n          el[i].style.display = value ? 'block' : 'none';\n        }\n      } //we don't use it in other way, so no else :)\n\n\n      return el;\n    }\n    /**\n    * Creates a HTMLElement from the passed HTML string.\n    * https://stackoverflow.com/a/494348/1081396\n    */\n\n    function createElementFromHTML(htmlString) {\n      var div = doc.createElement('div');\n      div.innerHTML = htmlString.trim(); // Change this to div.childNodes to support multiple top-level nodes\n\n      return div.firstChild;\n    }\n    /**\n    * Removes the passed item/s from the DOM.\n    */\n\n    function remove(items) {\n      items = getList(items);\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (item && item.parentElement) {\n          item.parentNode.removeChild(item);\n        }\n      }\n    } //https://jsfiddle.net/w1rktecz/\n\n    function untilAll(item, selector, fn) {\n      var sibling = item[fn];\n      var siblings = [];\n\n      while (sibling) {\n        if (matches(sibling, selector) || selector == null) {\n          siblings.push(sibling);\n        }\n\n        sibling = sibling[fn];\n      }\n\n      return siblings;\n    }\n    /**\n    * Gets all next elements matching the passed selector.\n    */\n\n    function nextAll(item, selector) {\n      return untilAll(item, selector, 'nextElementSibling');\n    }\n    /**\n    * Gets all previous elements matching the passed selector.\n    */\n\n    function prevAll(item, selector) {\n      return untilAll(item, selector, 'previousElementSibling');\n    }\n    /**\n    * Converts an object to an array.\n    */\n\n    function toArray(objectData) {\n      return Object.keys(objectData).map(function (key) {\n        return objectData[key];\n      });\n    }\n    function getLast(items) {\n      return items[items.length - 1];\n    }\n    /**\n    * Gets the average of the last `number` elements of the given array.\n    */\n\n    function getAverage(elements, number) {\n      var sum = 0; //taking `number` elements from the end to make the average, if there are not enought, 1\n\n      var lastElements = elements.slice(Math.max(elements.length - number, 1));\n\n      for (var i = 0; i < lastElements.length; i++) {\n        sum = sum + lastElements[i];\n      }\n\n      return Math.ceil(sum / number);\n    }\n    /**\n    * Sets the value for the given attribute from the `data-` attribute with the same suffix\n    * ie: data-srcset ==> srcset  |  data-src ==> src\n    */\n\n    function setSrc(element, attribute) {\n      element.setAttribute(attribute, getAttr(element, 'data-' + attribute));\n      element.removeAttribute('data-' + attribute);\n    }\n    function getParentsUntil(item, topParentSelector) {\n      var parents = [item];\n\n      do {\n        item = item.parentNode;\n        parents.push(item);\n      } while (!matches(item, topParentSelector));\n\n      return parents;\n    }\n    function isInsideInput() {\n      var activeElement = doc.activeElement;\n      return matches(activeElement, 'textarea') || matches(activeElement, 'input') || matches(activeElement, 'select') || getAttr(activeElement, 'contentEditable') == \"true\" || getAttr(activeElement, 'contentEditable') == '';\n    } //utils are public, so we can use it wherever we want\n    // @ts-ignore\n\n    window[\"fp_utils\"] = {\n      \"$\": $,\n      \"deepExtend\": deepExtend,\n      \"hasClass\": hasClass,\n      \"getWindowHeight\": getWindowHeight,\n      \"css\": css,\n      \"prev\": prev,\n      \"next\": next,\n      \"last\": last,\n      \"index\": index,\n      \"getList\": getList,\n      \"hide\": hide,\n      \"show\": show,\n      \"isArrayOrList\": isArrayOrList,\n      \"addClass\": addClass,\n      \"removeClass\": removeClass,\n      \"appendTo\": appendTo,\n      \"wrap\": wrap,\n      \"wrapAll\": wrapAll,\n      \"unwrap\": unwrap,\n      \"closest\": closest,\n      \"after\": after,\n      \"before\": before,\n      \"insertBefore\": insertBefore,\n      \"getScrollTop\": getScrollTop,\n      \"siblings\": siblings,\n      \"preventDefault\": preventDefault,\n      \"isFunction\": isFunction,\n      \"trigger\": trigger,\n      \"matches\": matches,\n      \"toggle\": toggle,\n      \"createElementFromHTML\": createElementFromHTML,\n      \"remove\": remove,\n      // \"filter\": filter,\n      \"untilAll\": untilAll,\n      \"nextAll\": nextAll,\n      \"prevAll\": prevAll,\n      \"showError\": showError\n    };\n\n    var utils = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        showError: showError,\n        isVisible: isVisible,\n        getVisible: getVisible,\n        $: $,\n        deepExtend: deepExtend,\n        hasClass: hasClass,\n        getWindowHeight: getWindowHeight,\n        getWindowWidth: getWindowWidth,\n        css: css,\n        prev: prev,\n        next: next,\n        last: last,\n        index: index,\n        getList: getList,\n        hide: hide,\n        show: show,\n        isArrayOrList: isArrayOrList,\n        addClass: addClass,\n        removeClass: removeClass,\n        appendTo: appendTo,\n        wrap: wrap,\n        wrapAll: wrapAll,\n        wrapInner: wrapInner,\n        unwrap: unwrap,\n        closest: closest,\n        after: after,\n        before: before,\n        insertBefore: insertBefore,\n        getScrollTop: getScrollTop,\n        siblings: siblings,\n        preventDefault: preventDefault,\n        getAttr: getAttr,\n        docAddEvent: docAddEvent,\n        windowAddEvent: windowAddEvent,\n        docRemoveEvent: docRemoveEvent,\n        windowRemoveEvent: windowRemoveEvent,\n        isFunction: isFunction,\n        trigger: trigger,\n        matches: matches,\n        toggle: toggle,\n        createElementFromHTML: createElementFromHTML,\n        remove: remove,\n        untilAll: untilAll,\n        nextAll: nextAll,\n        prevAll: prevAll,\n        toArray: toArray,\n        getLast: getLast,\n        getAverage: getAverage,\n        setSrc: setSrc,\n        getParentsUntil: getParentsUntil,\n        isInsideInput: isInsideInput\n    });\n\n    function _typeof(obj) {\n      \"@babel/helpers - typeof\";\n\n      if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function (obj) {\n          return typeof obj;\n        };\n      } else {\n        _typeof = function (obj) {\n          return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n      }\n\n      return _typeof(obj);\n    }\n\n    var EventEmitter = {\n      events: {},\n      on: function on(event, listener) {\n        var _this = this;\n\n        if (_typeof(this.events[event]) !== 'object') {\n          this.events[event] = [];\n        }\n\n        this.events[event].push(listener);\n        return function () {\n          return _this.removeListener(event, listener);\n        };\n      },\n      removeListener: function removeListener(event, listener) {\n        if (_typeof(this.events[event]) === 'object') {\n          var idx = this.events[event].indexOf(listener);\n\n          if (idx > -1) {\n            this.events[event].splice(idx, 1);\n          }\n        }\n      },\n      emit: function emit(event) {\n        var _this2 = this;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        if (_typeof(this.events[event]) === 'object') {\n          this.events[event].forEach(function (listener) {\n            return listener.apply(_this2, args);\n          });\n        }\n      },\n      once: function once(event, listener) {\n        var _this3 = this;\n\n        var remove = this.on(event, function () {\n          remove();\n\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          listener.apply(_this3, args);\n        });\n      }\n    };\n\n    var defaultState = {\n      numSections: 0,\n      numSlides: 0,\n      slides: [],\n      sections: [],\n      activeSection: null,\n      scrollTrigger: null,\n      isBeyondFullpage: false,\n      aboutToScrollToFullPage: false,\n      slideMoving: false,\n      isResizing: false,\n      isScrolling: false,\n      lastScrolledDestiny: undefined,\n      lastScrolledSlide: undefined,\n      activeAnimation: false,\n      canScroll: true,\n      touchDirection: 'none',\n      wheelDirection: 'none',\n      isGrabbing: false,\n      isUsingWheel: false,\n      isWindowFocused: true,\n      previousDestTop: 0,\n      windowsHeight: getWindowHeight(),\n      isDoingContinousVertical: false,\n      timeouts: {},\n      scrollY: 0,\n      scrollX: 0,\n      isFullpageInitDone: false\n    };\n    var state = Object.assign({}, defaultState); // @ts-ignore\n\n    win.state = state;\n    function setState(props) {\n      Object.assign(state, props);\n    }\n    function getState() {\n      return state;\n    }\n    function getActivePanel() {\n      return state.activeSection && state.activeSection.activeSlide ? state.activeSection.activeSlide : state.activeSection;\n    }\n    function resetState() {\n      setState(defaultState);\n    }\n\n    var events = {\n      onAfterRenderNoAnchor: 'onAfterRenderNoAnchor',\n      onClickOrTouch: 'onClickOrTouch',\n      moveSlideLeft: 'moveSlideLeft',\n      moveSlideRight: 'moveSlideRight',\n      onInitialise: 'onInitialise',\n      beforeInit: 'beforeInit',\n      bindEvents: 'bindEvents',\n      onDestroy: 'onDestroy',\n      onDestroyAll: 'onDestroyAll',\n      contentChanged: 'contentChanged',\n      onScrollOverflowScrolled: 'onScrollOverflowScrolled',\n      onScrollPageAndSlide: 'onScrollPageAndSlide',\n      onKeyDown: 'onKeyDown',\n      onMenuClick: 'onMenuClick',\n      scrollPage: 'scrollPage',\n      landscapeScroll: 'landscapeScroll',\n      scrollBeyondFullpage: 'scrollBeyondFullpage',\n      onPerformMovement: 'onPerformMovement',\n      onSlideLeave: 'onSlideLeave',\n      onLeave: 'onLeave',\n      afterSectionLoads: 'afterSectionLoads',\n      afterSlideLoads: 'afterSlideLoads'\n    };\n\n    EventEmitter.on(events.bindEvents, bindEvents$c);\n\n    function bindEvents$c() {\n      //Scrolls to the section when clicking the navigation bullet\n      //simulating the jQuery .on('click') event using delegation\n      ['click', 'touchstart'].forEach(function (eventName) {\n        docAddEvent(eventName, delegatedEvents);\n      });\n      windowAddEvent('focus', focusHandler);\n      internalEvents();\n    }\n\n    function internalEvents() {\n      EventEmitter.on(events.onDestroy, onDestroy$9);\n    }\n\n    function delegatedEvents(e) {\n      EventEmitter.emit(events.onClickOrTouch, {\n        e: e,\n        target: e.target\n      });\n    }\n\n    function onDestroy$9() {\n      ['click', 'touchstart'].forEach(function (eventName) {\n        docRemoveEvent(eventName, delegatedEvents);\n      });\n    } // changing isWindowFocused to true on focus event\n\n\n    function focusHandler() {\n      setState({\n        isWindowFocused: true\n      });\n    }\n\n    // keeping central set of classnames and selectors\n    var WRAPPER = 'fullpage-wrapper';\n    var WRAPPER_SEL = '.' + WRAPPER; // slimscroll\n\n    var SCROLLABLE = 'fp-scrollable';\n\n    var RESPONSIVE = 'fp-responsive';\n    var NO_TRANSITION = 'fp-notransition';\n    var DESTROYED = 'fp-destroyed';\n    var ENABLED = 'fp-enabled';\n    var VIEWING_PREFIX = 'fp-viewing';\n    var ACTIVE = 'active';\n    var ACTIVE_SEL = '.' + ACTIVE;\n    var COMPLETELY = 'fp-completely';\n    var COMPLETELY_SEL = '.' + COMPLETELY;\n    var LOADED = 'fp-loaded';\n\n    var SECTION_DEFAULT_SEL = '.section';\n    var SECTION = 'fp-section';\n    var SECTION_SEL = '.' + SECTION;\n    var SECTION_ACTIVE_SEL = SECTION_SEL + ACTIVE_SEL;\n    var TABLE_CELL = 'fp-tableCell';\n    var TABLE_CELL_SEL = '.' + TABLE_CELL;\n    var AUTO_HEIGHT = 'fp-auto-height';\n    var AUTO_HEIGHT_SEL = '.' + AUTO_HEIGHT;\n    var AUTO_HEIGHT_RESPONSIVE = 'fp-auto-height-responsive';\n    var AUTO_HEIGHT_RESPONSIVE_SEL = '.' + AUTO_HEIGHT_RESPONSIVE;\n    var NORMAL_SCROLL = 'fp-normal-scroll';\n\n    var SECTION_NAV = 'fp-nav';\n    var SECTION_NAV_SEL = '#' + SECTION_NAV;\n    var SECTION_NAV_TOOLTIP = 'fp-tooltip';\n    var SECTION_NAV_TOOLTIP_SEL = '.' + SECTION_NAV_TOOLTIP;\n    var SHOW_ACTIVE_TOOLTIP = 'fp-show-active'; // slide\n\n    var SLIDE_DEFAULT_SEL = '.slide';\n    var SLIDE = 'fp-slide';\n    var SLIDE_SEL = '.' + SLIDE;\n    var SLIDE_ACTIVE_SEL = SLIDE_SEL + ACTIVE_SEL;\n    var SLIDES_WRAPPER = 'fp-slides';\n    var SLIDES_WRAPPER_SEL = '.' + SLIDES_WRAPPER;\n    var SLIDES_CONTAINER = 'fp-slidesContainer';\n    var SLIDES_CONTAINER_SEL = '.' + SLIDES_CONTAINER;\n    var TABLE = 'fp-table';\n    var OVERFLOW = 'fp-overflow';\n    var OVERFLOW_SEL = '.' + OVERFLOW;\n    var IS_OVERFLOW = 'fp-is-overflow'; // slide nav\n\n    var SLIDES_NAV = 'fp-slidesNav';\n    var SLIDES_NAV_SEL = '.' + SLIDES_NAV;\n    var SLIDES_NAV_LINK_SEL = SLIDES_NAV_SEL + ' a';\n    var SLIDES_STYLED_ARROW = 'fp-arrow';\n    var SLIDES_ARROW = 'fp-controlArrow';\n    var SLIDES_ARROW_SEL = '.' + SLIDES_ARROW;\n    var SLIDES_PREV = 'fp-prev';\n    var SLIDES_PREV_SEL = '.' + SLIDES_PREV;\n    var SLIDES_ARROW_PREV_SEL = SLIDES_ARROW_SEL + SLIDES_PREV_SEL;\n    var SLIDES_NEXT = 'fp-next';\n    var SLIDES_NEXT_SEL = '.' + SLIDES_NEXT;\n    var SLIDES_ARROW_NEXT_SEL = SLIDES_ARROW_SEL + SLIDES_NEXT_SEL; // Watermark\n\n    var WATERMARK = 'fp-watermark';\n    var WATERMARK_SEL = '.' + WATERMARK;\n\n    var defaultOptions = {\n      //navigation\n      menu: false,\n      anchors: [],\n      lockAnchors: false,\n      navigation: false,\n      navigationPosition: 'right',\n      navigationTooltips: [],\n      showActiveTooltip: false,\n      slidesNavigation: false,\n      slidesNavPosition: 'bottom',\n      scrollBar: false,\n      hybrid: false,\n      licenseKey: '',\n      credits: {\n        \"enabled\": true,\n        \"label\": 'Made with fullPage.js',\n        \"position\": 'right'\n      },\n      //scrolling\n      css3: true,\n      scrollingSpeed: 700,\n      autoScrolling: true,\n      fitToSection: true,\n      fitToSectionDelay: 600,\n      easing: 'easeInOutCubic',\n      easingcss3: 'ease',\n      loopBottom: false,\n      loopTop: false,\n      loopHorizontal: true,\n      continuousVertical: false,\n      continuousHorizontal: false,\n      scrollHorizontally: false,\n      interlockedSlides: false,\n      dragAndMove: false,\n      offsetSections: false,\n      resetSliders: false,\n      fadingEffect: false,\n      normalScrollElements: null,\n      scrollOverflow: true,\n      scrollOverflowReset: false,\n      skipIntermediateItems: false,\n      touchSensitivity: 5,\n      touchWrapper: null,\n      bigSectionsDestination: null,\n      adjustOnNavChange: true,\n      //Accessibility\n      keyboardScrolling: true,\n      animateAnchor: true,\n      recordHistory: true,\n      allowCorrectDirection: false,\n      //design\n      scrollOverflowMacStyle: true,\n      controlArrows: true,\n      controlArrowsHTML: ['<div class=\"' + SLIDES_STYLED_ARROW + '\"></div>', '<div class=\"' + SLIDES_STYLED_ARROW + '\"></div>'],\n      controlArrowColor: '#fff',\n      verticalCentered: true,\n      sectionsColor: [],\n      paddingTop: 0,\n      paddingBottom: 0,\n      fixedElements: null,\n      responsive: 0,\n      //backwards compabitility with responsiveWiddth\n      responsiveWidth: 0,\n      responsiveHeight: 0,\n      responsiveSlides: false,\n      parallax: false,\n      parallaxOptions: {\n        type: 'reveal',\n        percentage: 62,\n        property: 'translate'\n      },\n      cards: false,\n      cardsOptions: {\n        perspective: 100,\n        fadeContent: true,\n        fadeBackground: true\n      },\n      //Custom selectors\n      sectionSelector: SECTION_DEFAULT_SEL,\n      slideSelector: SLIDE_DEFAULT_SEL,\n      //events\n      afterLoad: null,\n      beforeLeave: null,\n      onLeave: null,\n      afterRender: null,\n      afterResize: null,\n      afterReBuild: null,\n      afterSlideLoad: null,\n      onSlideLeave: null,\n      afterResponsive: null,\n      onScrollOverflow: null,\n      lazyLoading: true,\n      lazyLoadThreshold: 0,\n      observer: true,\n      scrollBeyondFullpage: true\n    };\n\n    var container = null;\n    var g_initialAnchorsInDom = false;\n    var originals = deepExtend({}, defaultOptions); //deep copy\n\n    var g_options = null;\n    function getInitialAnchorsInDom() {\n      return g_initialAnchorsInDom;\n    }\n    function setContainer(value) {\n      container = value;\n    }\n    function getContainer(value) {\n      return container;\n    }\n    function getOptions() {\n      return g_options || defaultOptions;\n    }\n    function setOptions(options) {\n      g_options = deepExtend({}, defaultOptions, options);\n      originals = Object.assign({}, g_options);\n    }\n    function getOriginals() {\n      return originals;\n    }\n    function setOption(name, value) {\n      defaultOptions[name] = value;\n    }\n    /*\n    * Sets the state for a variable with multiple states (original, and temporal)\n    * Some variables such as `autoScrolling` or `recordHistory` might change automatically its state when using `responsive` or `autoScrolling:false`.\n    * This function is used to keep track of both states, the original and the temporal one.\n    * If type is not 'internal', then we assume the user is globally changing the variable.\n    */\n\n    function setVariableState(variable, value, type) {\n      g_options[variable] = value;\n\n      if (type !== 'internal') {\n        originals[variable] = value;\n      }\n    }\n    /**\n    * Setting options from DOM elements if they are not provided.\n    */\n\n    function setOptionsFromDOM() {\n      //no anchors option? Checking for them in the DOM attributes\n      if (!getOptions().anchors.length) {\n        var anchorsAttribute = '[data-anchor]';\n        var anchors = $(getOptions().sectionSelector.split(',').join(anchorsAttribute + ',') + anchorsAttribute, container);\n\n        if (anchors.length && anchors.length === $(getOptions().sectionSelector, container).length) {\n          g_initialAnchorsInDom = true;\n          anchors.forEach(function (item) {\n            getOptions().anchors.push(getAttr(item, 'data-anchor').toString());\n          });\n        }\n      } //no tooltips option? Checking for them in the DOM attributes\n\n\n      if (!getOptions().navigationTooltips.length) {\n        var tooltipsAttribute = '[data-tooltip]';\n        var tooltips = $(getOptions().sectionSelector.split(',').join(tooltipsAttribute + ',') + tooltipsAttribute, container);\n\n        if (tooltips.length) {\n          tooltips.forEach(function (item) {\n            getOptions().navigationTooltips.push(getAttr(item, 'data-tooltip').toString());\n          });\n        }\n      }\n    }\n\n    var plainItem = function plainItem(panel) {\n      this.anchor = panel.anchor;\n      this.item = panel.item;\n      this.index = panel.index();\n      this.isLast = this.index === panel.item.parentElement.querySelectorAll(panel.selector).length - 1;\n      this.isFirst = !this.index;\n      this.isActive = panel.isActive;\n    };\n    /**\n    * Item. Slide or Section objects share the same properties.\n    */\n\n    var Item = function Item(el, selector) {\n      this.parent = this.parent || null;\n      this.selector = selector;\n      this.anchor = getAttr(el, 'data-anchor') || getOptions().anchors[index(el, getOptions().sectionSelector)];\n      this.item = el;\n      this.isVisible = isVisible(el);\n      this.isActive = hasClass(el, ACTIVE);\n      this.hasScroll = hasClass(el, OVERFLOW) || $(OVERFLOW_SEL, el)[0] != null;\n      this.isSection = selector === getOptions().sectionSelector;\n      this.container = closest(el, SLIDES_CONTAINER_SEL) || closest(el, WRAPPER_SEL);\n\n      this.index = function () {\n        return this.siblings().indexOf(this);\n      };\n    };\n\n    Item.prototype.siblings = function () {\n      if (this.isSection) {\n        if (this.isVisible) {\n          return state.sections;\n        } else {\n          return state.sectionsIncludingHidden;\n        }\n      }\n\n      return this.parent ? this.parent.slides : 0;\n    };\n\n    Item.prototype.prev = function () {\n      var siblings = this.siblings();\n      var currentIndex = this.isSection ? siblings.indexOf(this) : this.parent.slides.indexOf(this);\n      var prevIndex = currentIndex - 1;\n\n      if (prevIndex >= 0) {\n        return siblings[prevIndex];\n      }\n\n      return null;\n    };\n\n    Item.prototype.next = function () {\n      var siblings = this.siblings();\n      var currentIndex = this.isSection ? siblings.indexOf(this) : this.parent.slides.indexOf(this);\n      var nextIndex = currentIndex + 1;\n\n      if (nextIndex < siblings.length) {\n        return siblings[nextIndex];\n      }\n\n      return null;\n    };\n\n    Item.prototype[\"prevPanel\"] = function () {\n      return this.prev() || (this.parent ? this.parent.prev() : null);\n    };\n\n    Item.prototype[\"nextPanel\"] = function () {\n      return this.next() || (this.parent ? this.parent.next() : null);\n    };\n\n    Item.prototype.getSiblings = function () {\n      if (this.isSection) {\n        return state.sections;\n      }\n\n      return state.panels;\n    };\n\n    function getNodes(panels) {\n      return panels.map(function (panel) {\n        return panel.item;\n      });\n    }\n    function getPanelByElement(panels, el) {\n      return panels.find(function (panel) {\n        return panel.item === el;\n      });\n    }\n    var Section = function Section(el) {\n      plainItem.call(this, el);\n    };\n    var Slide = function Slide(el) {\n      plainItem.call(this, el);\n    };\n\n    /**\n    * Gets the active slide (or section) for the given section\n    */\n\n    function getSlideOrSection(destiny) {\n      var slide = $(SLIDE_ACTIVE_SEL, destiny);\n\n      if (slide.length) {\n        destiny = slide[0];\n      }\n\n      return destiny;\n    }\n    function getSlideOrSectionPanel(panel) {\n      if (!panel) {\n        return null;\n      }\n\n      return panel.activeSlide ? panel.activeSlide : panel;\n    }\n    function isFullPageAbove() {\n      return getContainer().getBoundingClientRect().bottom >= 0;\n    }\n    /**\n    * Gets the scrolling settings depending on the plugin autoScrolling option\n    */\n\n    function getScrollSettings(top) {\n      var options = getOptions();\n      var position;\n      var element; //top property animation\n\n      if (options.autoScrolling && !options.scrollBar) {\n        position = -top;\n        element = $(WRAPPER_SEL)[0];\n      } //window real scrolling\n      else {\n        position = top;\n        element = window;\n      }\n\n      return {\n        options: position,\n        element: element\n      };\n    }\n    /**\n    * Scrolls the page / slider the given number of pixels.\n    * It will do it one or another way dependiong on the library's config.\n    */\n\n    function setScrolling(element, val) {\n      if (!getOptions().autoScrolling || getOptions().scrollBar || element.self != window && hasClass(element, SLIDES_WRAPPER)) {\n        //scrolling horizontally through the slides?\n        if (element.self != window && hasClass(element, SLIDES_WRAPPER)) {\n          element.scrollLeft = val;\n        } //vertical scroll\n        else {\n          element.scrollTo(0, val);\n        }\n      } else {\n        element.style.top = val + 'px';\n      }\n    }\n    /**\n    * Adds transition animations for the given element\n    */\n\n    function addAnimation(element) {\n      var transition = 'transform ' + getOptions().scrollingSpeed + 'ms ' + getOptions().easingcss3;\n      removeClass(element, NO_TRANSITION);\n      return css(element, {\n        '-webkit-transition': transition,\n        'transition': transition\n      });\n    }\n    /**\n    * Retuns `up` or `down` depending on the scrolling movement to reach its destination\n    * from the current section.\n    */\n\n    function getYmovement(activeSection, destiny) {\n      var fromIndex = activeSection.index();\n      var toIndex = index(destiny, SECTION_SEL);\n\n      if (fromIndex == toIndex) {\n        return 'none';\n      }\n\n      if (fromIndex > toIndex) {\n        return 'up';\n      }\n\n      return 'down';\n    }\n    /**\n    * Remove transition animations for the given element\n    */\n\n    function removeAnimation(element) {\n      return addClass(element, NO_TRANSITION);\n    }\n    /**\n    * Returns the cross-browser transform string.\n    */\n\n    function getTransforms(translate3d) {\n      return {\n        '-webkit-transform': translate3d,\n        '-moz-transform': translate3d,\n        '-ms-transform': translate3d,\n        'transform': translate3d\n      };\n    }\n\n    var silentScrollId;\n    /**\n    * Adds a css3 transform property to the container class with or without animation depending on the animated param.\n    */\n\n    function transformContainer(translate3d, animated) {\n      if (animated) {\n        addAnimation(getContainer());\n      } else {\n        removeAnimation(getContainer());\n      }\n\n      clearTimeout(silentScrollId);\n      css(getContainer(), getTransforms(translate3d));\n      FP.test.translate3d = translate3d; //syncronously removing the class after the animation has been applied.\n\n      silentScrollId = setTimeout(function () {\n        removeClass(getContainer(), NO_TRANSITION);\n      }, 10);\n    }\n\n    /**\n    * Scrolls silently (with no animation) the page to the given Y position.\n    */\n\n    function silentScroll(top) {\n      // The first section can have a negative value in iOS 10. Not quite sure why: -0.0142822265625\n      // that's why we round it to 0.\n      var roundedTop = Math.round(top);\n\n      if (getOptions().css3 && getOptions().autoScrolling && !getOptions().scrollBar) {\n        var translate3d = 'translate3d(0px, -' + roundedTop + 'px, 0px)';\n        transformContainer(translate3d, false);\n      } else if (getOptions().autoScrolling && !getOptions().scrollBar) {\n        css(getContainer(), {\n          'top': -roundedTop + 'px'\n        });\n        FP.test.top = -roundedTop + 'px';\n      } else {\n        var scrollSettings = getScrollSettings(roundedTop);\n        setScrolling(scrollSettings.element, scrollSettings.options);\n      }\n    }\n\n    FP.setScrollingSpeed = setScrollingSpeed;\n    /**\n    * Defines the scrolling speed\n    */\n\n    function setScrollingSpeed(value, type) {\n      setVariableState('scrollingSpeed', value, type);\n    }\n\n    var $body = null;\n    var $html = null;\n    var $htmlBody = null; // caching common elements\n\n    function setCache() {\n      $body = $('body')[0];\n      $html = $('html')[0];\n      $htmlBody = $('html, body');\n    }\n\n    //@ts-check\n\n    var _g_animateScroll;\n    /**\n    * Simulates the animated scrollTop of jQuery. Used when css3:false or scrollBar:true or autoScrolling:false\n    * http://stackoverflow.com/a/16136789/1081396\n    */\n\n\n    function scrollTo(element, to, duration, callback) {\n      var start = getScrolledPosition(element);\n      var change = to - start;\n      var isCallbackFired = false;\n      var startTime;\n      var wasAnimationActive = state.activeAnimation;\n      setState({\n        activeAnimation: true\n      }); // Cancelling any possible previous animations (io: clicking on nav dots very fast)\n\n      if (_g_animateScroll) {\n        window.cancelAnimationFrame(_g_animateScroll);\n      }\n\n      _g_animateScroll = function g_animateScroll(timestamp) {\n        if (!startTime) {\n          startTime = timestamp;\n        }\n\n        var currentTime = Math.floor(timestamp - startTime);\n\n        if (state.activeAnimation) {\n          //in order to stope it from other function whenever we want\n          var val = to;\n\n          if (duration) {\n            // @ts-ignore\n            val = win.fp_easings[getOptions().easing](currentTime, start, change, duration);\n          }\n\n          if (currentTime <= duration) {\n            setScrolling(element, val);\n          }\n\n          if (currentTime < duration) {\n            window.requestAnimationFrame(_g_animateScroll);\n          } else if (typeof callback !== 'undefined' && !isCallbackFired) {\n            setScrolling(element, to);\n            callback();\n            setState({\n              activeAnimation: false\n            });\n            isCallbackFired = true;\n          }\n        } else if (!isCallbackFired && !wasAnimationActive) {\n          callback();\n          setState({\n            activeAnimation: false\n          });\n          isCallbackFired = true;\n        }\n      };\n\n      window.requestAnimationFrame(_g_animateScroll);\n    }\n    /**\n    * Getting the position of the element to scroll when using jQuery animations\n    */\n\n    function getScrolledPosition(element) {\n      var position; //is not the window element and is a slide?\n\n      if (element.self != win && hasClass(element, SLIDES_WRAPPER)) {\n        position = element.scrollLeft;\n      } else if (!getOptions().autoScrolling || getOptions().scrollBar) {\n        position = getScrollTop();\n      } else {\n        position = element.offsetTop;\n      } //gets the top property of the wrapper\n\n\n      return position;\n    }\n\n    /**\n    * Makes sure to only create a Panel object if the element exist\n    */\n\n    function nullOrSection(el) {\n      if (el && !el.item) {\n        return new Section(new SectionPanel(el));\n      }\n\n      return el ? new Section(el) : null;\n    }\n\n    function nullOrSlide(el) {\n      return el ? new Slide(el) : null;\n    }\n\n    /**\n    * Dispatch events & callbacks\n    */\n\n    function fireCallback(eventName, v) {\n      var eventData = getEventData(eventName, v);\n      trigger(getContainer(), eventName, eventData);\n\n      if (getOptions()[eventName].apply(eventData[Object.keys(eventData)[0]], toArray(eventData)) === false) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n    * Gets the event's data for the given event on the right format.\n    */\n\n    function getEventData(eventName, v) {\n      //using functions to run only the necessary bits within the object\n      var paramsPerEvent = {\n        afterRender: function afterRender() {\n          return {\n            section: nullOrSection(getState().activeSection),\n            slide: nullOrSlide(getState().activeSection.activeSlide)\n          };\n        },\n        onLeave: function onLeave() {\n          return {\n            origin: nullOrSection(v.items.origin),\n            destination: nullOrSection(v.items.destination),\n            direction: v.direction,\n            trigger: getState().scrollTrigger\n          };\n        },\n        afterLoad: function afterLoad() {\n          return paramsPerEvent.onLeave();\n        },\n        afterSlideLoad: function afterSlideLoad() {\n          return {\n            section: nullOrSection(v.items.section),\n            origin: nullOrSection(v.items.origin),\n            destination: nullOrSection(v.items.destination),\n            direction: v.direction,\n            trigger: getState().scrollTrigger\n          };\n        },\n        onSlideLeave: function onSlideLeave() {\n          return paramsPerEvent.afterSlideLoad();\n        },\n        beforeLeave: function beforeLeave() {\n          return paramsPerEvent.onLeave();\n        },\n        onScrollOverflow: function onScrollOverflow() {\n          return {\n            section: nullOrSection(getState().activeSection),\n            slide: nullOrSlide(getState().activeSection.activeSlide),\n            position: v.position,\n            direction: v.direction\n          };\n        }\n      };\n      return paramsPerEvent[eventName]();\n    }\n\n    function hasAutoPlay(item) {\n      return item.hasAttribute('data-autoplay') || item.hasAttribute('autoplay');\n    }\n    /**\n    * Plays video and audio elements.\n    */\n\n\n    function playMedia(destiny) {\n      var panel = getSlideOrSection(destiny); //playing HTML5 media elements\n\n      $('video, audio', panel).forEach(function (element) {\n        if (hasAutoPlay(element) && typeof element.play === 'function') {\n          element.play();\n        }\n      }); //youtube videos\n\n      $('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function (element) {\n        if (hasAutoPlay(element)) {\n          playYoutube(element);\n        } //in case the URL was not loaded yet. On page load we need time for the new URL (with the API string) to load.\n\n\n        element.onload = function () {\n          if (hasAutoPlay(element)) {\n            playYoutube(element);\n          }\n        };\n      });\n    }\n    /**\n    * Plays a youtube video\n    */\n\n    function playYoutube(element) {\n      element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}', '*');\n    }\n    /**\n    * Stops video and audio elements.\n    */\n\n\n    function stopMedia(destiny) {\n      var panel = getSlideOrSection(destiny); //stopping HTML5 media elements\n\n      $('video, audio', panel).forEach(function (element) {\n        if (!element.hasAttribute('data-keepplaying') && typeof element.pause === 'function') {\n          element.pause();\n        }\n      }); //youtube videos\n\n      $('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function (element) {\n        if (/youtube\\.com\\/embed\\//.test(getAttr(element, 'src')) && !element.hasAttribute('data-keepplaying')) {\n          element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}', '*');\n        }\n      });\n    }\n    /*\n    * Enables the Youtube videos API so we can control their flow if necessary.\n    */\n\n    function enableYoutubeAPI() {\n      $('iframe[src*=\"youtube.com/embed/\"]', getContainer()).forEach(function (item) {\n        addURLParam(item, 'enablejsapi=1');\n      });\n    }\n    /**\n    * Adds a new parameter and its value to the `src` of a given element\n    */\n\n    function addURLParam(element, newParam) {\n      var originalSrc = getAttr(element, 'src');\n      element.setAttribute('src', originalSrc + getUrlParamSign(originalSrc) + newParam);\n    }\n    /*\n    * Returns the prefix sign to use for a new parameter in an existen URL.\n    *\n    * @return {String}  ? | &\n    */\n\n\n    function getUrlParamSign(url) {\n      return !/\\?/.test(url) ? '?' : '&';\n    }\n\n    /**\n    * Lazy loads image, video and audio elements.\n    */\n\n    function lazyLoad(destiny) {\n      if (!getOptions().lazyLoading) {\n        return;\n      }\n\n      var panel = getSlideOrSection(destiny);\n      $('img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]', panel).forEach(function (element) {\n        ['src', 'srcset'].forEach(function (type) {\n          var attribute = getAttr(element, 'data-' + type);\n\n          if (attribute != null && attribute) {\n            setSrc(element, type);\n            element.addEventListener('load', function () {\n            });\n          }\n        });\n\n        if (matches(element, 'source')) {\n          var elementToPlay = closest(element, 'video, audio');\n\n          if (elementToPlay) {\n            elementToPlay.load();\n\n            elementToPlay.onloadeddata = function () {\n            };\n          }\n        }\n      }); // Add fp-loaded class to the panel after lazy loading\n\n      addClass(panel, LOADED);\n    }\n    function lazyLoadPanels(panel) {\n      var lazyLoadThresold = getOptions().lazyLoadThreshold;\n      lazyLoad(panel.item);\n\n      if (lazyLoadThresold) {\n        lazyLoadDirection(panel, 'prev', lazyLoadThresold);\n        lazyLoadDirection(panel, 'next', lazyLoadThresold);\n      }\n    } // Lazy load \"count\" number of panels in a specific direction\n\n    function lazyLoadDirection(startPanel, direction, count) {\n      var currentPanel = startPanel;\n\n      for (var i = 0; i < count && (currentPanel = currentPanel[direction]()); i++) {\n        console.log(currentPanel.item);\n        lazyLoad(currentPanel.item);\n      }\n    }\n\n    /**\n    * Sets a class for the body of the page depending on the active section / slide\n    */\n\n    function setBodyClass() {\n      var section = getState().activeSection.item;\n      var slide = getState().activeSection.activeSlide;\n      var sectionAnchor = getAnchor(section);\n      var text = String(sectionAnchor);\n\n      if (slide) {\n        var slideAnchor = getAnchor(slide.item);\n        text = text + '-' + slideAnchor;\n      } //changing slash for dash to make it a valid CSS style\n\n\n      text = text.replace('/', '-').replace('#', '').replace(/\\s/g, ''); //removing previous anchor classes\n\n      var classRe = new RegExp('\\\\b\\\\s?' + VIEWING_PREFIX + '-[^\\\\s]+\\\\b', \"g\");\n      $body.className = $body.className.replace(classRe, ''); //adding the current anchor\n\n      addClass($body, VIEWING_PREFIX + '-' + text);\n    }\n    /**\n    * Gets the anchor for the given slide / section. Its index will be used if there's none.\n    */\n\n    function getAnchor(element) {\n      if (!element) {\n        return null;\n      }\n\n      var anchor = getAttr(element, 'data-anchor');\n      var elementIndex = index(element); //Slide without anchor link? We take the index instead.\n\n      if (anchor == null) {\n        anchor = elementIndex;\n      }\n\n      return anchor;\n    }\n\n    EventEmitter.on(events.onDestroyAll, onDestroyAll$1);\n\n    function onDestroyAll$1() {\n      setUrlHash('');\n    }\n    /**\n    * Sets the state of the website depending on the active section/slide.\n    * It changes the URL hash when needed and updates the body class.\n    */\n\n\n    function setPageStatus(slideIndex, slideAnchor, anchorLink) {\n      var sectionHash = '';\n\n      if (getOptions().anchors.length && !getOptions().lockAnchors) {\n        //isn't it the first slide?\n        if (slideIndex) {\n          if (anchorLink != null) {\n            sectionHash = anchorLink;\n          } //slide without anchor link? We take the index instead.\n\n\n          if (slideAnchor == null) {\n            slideAnchor = slideIndex;\n          }\n\n          setState({\n            lastScrolledSlide: slideAnchor\n          });\n          setUrlHash(sectionHash + '/' + slideAnchor); //first slide won't have slide anchor, just the section one\n        } else if (slideIndex != null) {\n          setState({\n            lastScrolledSlide: slideAnchor\n          });\n          setUrlHash(anchorLink);\n        } //section without slides\n        else {\n          setUrlHash(anchorLink);\n        }\n      }\n\n      setBodyClass();\n    }\n    /**\n    * Sets the URL hash.\n    */\n\n    function setUrlHash(url) {\n      if (getOptions().recordHistory) {\n        location.hash = url;\n      } else {\n        win.history.replaceState(undefined, undefined, '#' + url);\n      }\n    }\n\n    /**\n    * Gets the name for screen readers for a section/slide navigation bullet.\n    */\n\n    function getBulletLinkName(i, defaultName, item) {\n      var anchor = defaultName === 'Section' ? getOptions().anchors[i] : getAttr(item, 'data-anchor');\n      return encodeURI(getOptions().navigationTooltips[i] || anchor || defaultName + ' ' + (i + 1));\n    }\n\n    function slideBulletHandler(e) {\n      // not all events are cancellable \n      // https://www.uriports.com/blog/easy-fix-for-intervention-ignored-attempt-to-cancel-a-touchmove-event-with-cancelable-false/\n      if (e.cancelable) {\n        preventDefault(e);\n      }\n\n      setState({\n        scrollTrigger: 'horizontalNav'\n      });\n      /*jshint validthis:true */\n\n      var sectionElem = closest(this, SECTION_SEL);\n      var slides = $(SLIDES_WRAPPER_SEL, closest(this, SECTION_SEL))[0];\n      var section = getPanelByElement(getState().sections, sectionElem);\n      var destiny = section.slides[index(closest(this, 'li'))];\n      EventEmitter.emit(events.landscapeScroll, {\n        slides: slides,\n        destination: destiny.item\n      });\n    }\n    /**\n    * Sets the state for the horizontal bullet navigations.\n    */\n\n    function activeSlidesNavigation(slidesNav, slideIndex) {\n      if (getOptions().slidesNavigation && slidesNav != null) {\n        removeClass($(ACTIVE_SEL, slidesNav), ACTIVE);\n        addClass($('a', $('li', slidesNav)[slideIndex]), ACTIVE);\n      }\n    }\n    /**\n    * Creates a landscape navigation bar with dots for horizontal sliders.\n    */\n\n    function addSlidesNavigation(section) {\n      var sectionElem = section.item;\n      var numSlides = section.slides.length;\n      appendTo(createElementFromHTML('<div class=\"' + SLIDES_NAV + '\"><ul></ul></div>'), sectionElem);\n      var nav = $(SLIDES_NAV_SEL, sectionElem)[0]; //top or bottom\n\n      addClass(nav, 'fp-' + getOptions().slidesNavPosition);\n\n      for (var i = 0; i < numSlides; i++) {\n        var slide = $(SLIDE_SEL, sectionElem)[i];\n        appendTo(createElementFromHTML('<li><a href=\"#\"><span class=\"fp-sr-only\">' + getBulletLinkName(i, 'Slide', slide) + '</span><span></span></a></li>'), $('ul', nav)[0]);\n      } //centering it\n\n\n      css(nav, {\n        'margin-left': '-' + nav.innerWidth / 2 + 'px'\n      });\n      var activeSlideIndex = section.activeSlide ? section.activeSlide.index() : 0;\n      addClass($('a', $('li', nav)[activeSlideIndex]), ACTIVE);\n    }\n\n    var isScrollAllowed = {};\n    isScrollAllowed.m = {\n      'up': true,\n      'down': true,\n      'left': true,\n      'right': true\n    };\n    isScrollAllowed.k = deepExtend({}, isScrollAllowed.m);\n    /**\n    * Allowing or disallowing the mouse/swipe scroll in a given direction. (not for keyboard)\n    * @param type m (mouse) or k (keyboard)\n    */\n\n    function setIsScrollAllowed(value, direction, type) {\n      //up, down, left, right\n      if (direction !== 'all') {\n        isScrollAllowed[type][direction] = value;\n      } //all directions?\n      else {\n        Object.keys(isScrollAllowed[type]).forEach(function (key) {\n          isScrollAllowed[type][key] = value;\n        });\n      }\n    }\n    function getIsScrollAllowed() {\n      return isScrollAllowed;\n    }\n\n    EventEmitter.on(events.onClickOrTouch, onClickOrTouch$2);\n\n    function onClickOrTouch$2(params) {\n      var target = params.target;\n\n      if (matches(target, SLIDES_ARROW_SEL) || closest(target, SLIDES_ARROW_SEL)) {\n        slideArrowHandler.call(target, params);\n      }\n    } //Scrolling horizontally when clicking on the slider controls.\n\n\n    function slideArrowHandler() {\n      /*jshint validthis:true */\n      var section = closest(this, SECTION_SEL);\n      var isPrevArrow = hasClass(this, SLIDES_PREV) || closest(this, SLIDES_PREV_SEL);\n      /*jshint validthis:true */\n\n      if (isPrevArrow) {\n        if (getIsScrollAllowed().m.left) {\n          setState({\n            scrollTrigger: 'slideArrow'\n          });\n          EventEmitter.emit(events.moveSlideLeft, {\n            section: section\n          });\n        }\n      } else {\n        if (getIsScrollAllowed().m.right) {\n          setState({\n            scrollTrigger: 'slideArrow'\n          });\n          EventEmitter.emit(events.moveSlideRight, {\n            section: section\n          });\n        }\n      }\n    }\n    /**\n    * Creates the control arrows for the given section\n    */\n\n\n    function createSlideArrows(section) {\n      var sectionElem = section.item;\n      var arrows = [createElementFromHTML(getOptions().controlArrowsHTML[0]), createElementFromHTML(getOptions().controlArrowsHTML[1])];\n      after($(SLIDES_WRAPPER_SEL, sectionElem)[0], arrows);\n      addClass(arrows, SLIDES_ARROW);\n      addClass(arrows[0], SLIDES_PREV);\n      addClass(arrows[1], SLIDES_NEXT);\n\n      if (getOptions().controlArrowColor !== '#fff') {\n        css($(SLIDES_ARROW_NEXT_SEL, sectionElem), {\n          'border-color': 'transparent transparent transparent ' + getOptions().controlArrowColor\n        });\n        css($(SLIDES_ARROW_PREV_SEL, sectionElem), {\n          'border-color': 'transparent ' + getOptions().controlArrowColor + ' transparent transparent'\n        });\n      }\n\n      if (!getOptions().loopHorizontal) {\n        hide($(SLIDES_ARROW_PREV_SEL, sectionElem));\n      }\n    }\n    function toggleControlArrows(v) {\n      if (!getOptions().loopHorizontal && getOptions().controlArrows) {\n        //hidding it for the fist slide, showing for the rest\n        toggle($(SLIDES_ARROW_PREV_SEL, v.section), v.slideIndex !== 0); //hidding it for the last slide, showing for the rest\n\n        toggle($(SLIDES_ARROW_NEXT_SEL, v.section), next(v.destiny) != null);\n      }\n    }\n\n    FP.setRecordHistory = setRecordHistory;\n    /**\n    * Defines wheter to record the history for each hash change in the URL.\n    */\n\n    function setRecordHistory(value, type) {\n      setVariableState('recordHistory', value, type);\n    }\n\n    FP.setAutoScrolling = setAutoScrolling;\n    FP.test.setAutoScrolling = setAutoScrolling;\n    /**\n    * Sets the autoScroll option.\n    * It changes the scroll bar visibility and the history of the site as a result.\n    */\n\n    function setAutoScrolling(value, type) {\n      //removing the transformation\n      if (!value) {\n        silentScroll(0);\n      }\n\n      setVariableState('autoScrolling', value, type);\n      var element = getState().activeSection.item;\n\n      if (getOptions().autoScrolling && !getOptions().scrollBar) {\n        css($htmlBody, {\n          'overflow': 'hidden',\n          'height': '100%'\n        });\n        removeClass($body, SCROLLABLE);\n        setRecordHistory(getOriginals().recordHistory, 'internal'); //for IE touch devices\n\n        css(getContainer(), {\n          '-ms-touch-action': 'none',\n          'touch-action': 'none'\n        });\n\n        if (element != null) {\n          //moving the container up\n          silentScroll(element.offsetTop);\n        }\n      } else {\n        css($htmlBody, {\n          'overflow': 'visible',\n          'height': 'initial'\n        });\n        addClass($body, SCROLLABLE);\n        var recordHistory = !getOptions().autoScrolling ? false : getOriginals().recordHistory;\n        setRecordHistory(recordHistory, 'internal'); //for IE touch devices\n\n        css(getContainer(), {\n          '-ms-touch-action': '',\n          'touch-action': ''\n        }); //scrolling the page to the section with no animation\n\n        if (element != null) {\n          var scrollSettings = getScrollSettings(element.offsetTop);\n          scrollSettings.element.scrollTo(0, scrollSettings.options);\n        }\n      }\n    }\n\n    function getTmpPosition(v) {\n      return hasClass(getState().activeSection.item, AUTO_HEIGHT) ? getDestinationPosition(getState().activeSection.item) : getState().activeSection.item.offsetTop;\n    }\n    function getDestinationPosForInfiniteScroll(v) {\n      // forcing the scroll to the bottom of the fp-auto-height section when scrolling up\n      if (v.isMovementUp && hasClass(v.element, AUTO_HEIGHT)) {\n        return getDestinationPosition(v.element) - getWindowHeight() + v.element.offsetHeight;\n      }\n\n      return v.element.offsetTop;\n    }\n\n    //@ts-check\n    /**\n    * Adds sections before or after the current one to create the infinite effect.\n    */\n\n    function createInfiniteSections(v) {\n      setState({\n        isDoingContinousVertical: true\n      });\n      var activeSectionItem = getState().activeSection.item; // Scrolling down\n\n      if (!v.isMovementUp) {\n        // Move all previous sections to after the active section\n        var prevSectionsReversed = prevAll(activeSectionItem, SECTION_SEL).reverse();\n        after(activeSectionItem, prevSectionsReversed[0]);\n      } else {\n        // Scrolling up\n        // Move all next sections to before the active section\n        before(activeSectionItem, nextAll(activeSectionItem, SECTION_SEL));\n      } // Maintain the displayed position (now that we changed the element order)\n\n\n      silentScroll(getTmpPosition()); // Maintain the active slides visible in the viewport\n\n      keepSlidesPosition$1(); // save for later the elements that still need to be reordered\n\n      v.wrapAroundElements = activeSectionItem; // Recalculate animation variables\n\n      v.dtop = getDestinationPosForInfiniteScroll(v);\n      v.yMovement = getYmovement(getState().activeSection, v.element);\n      return v;\n    }\n    /**\n    * Maintains the active slides in the viewport\n    * (Because the `scroll` animation might get lost with some actions, such as when using continuousVertical)\n    */\n\n    function keepSlidesPosition$1() {\n      var activeSlides = $(SLIDE_ACTIVE_SEL);\n\n      for (var i = 0; i < activeSlides.length; i++) {\n        silentLandscapeScroll(activeSlides[i], 'internal');\n      }\n    }\n\n    //@ts-check\n    /**\n    * Maintains the active slides in the viewport\n    * (Because the `scroll` animation might get lost with some actions, such as when using continuousVertical)\n    */\n\n    function keepSlidesPosition() {\n      var activeSlides = $(SLIDE_ACTIVE_SEL);\n\n      for (var i = 0; i < activeSlides.length; i++) {\n        silentLandscapeScroll(activeSlides[i], 'internal');\n      }\n    }\n    /**\n    * Fix section order after continuousVertical changes have been animated\n    */\n\n\n    function continuousVerticalFixSectionOrder(v) {\n      // If continuousVertical is in effect (and autoScrolling would also be in effect then),\n      // finish moving the elements around so the direct navigation will function more simply\n      if (v.wrapAroundElements == null) {\n        return;\n      }\n\n      if (v.isMovementUp) {\n        before($(SECTION_SEL)[0], v.wrapAroundElements);\n      } else {\n        after($(SECTION_SEL)[getState().sections.length - 1], prevAll(v.element, SECTION_SEL).reverse());\n      }\n\n      silentScroll(getTmpPosition()); // Maintain the active slides visible in the viewport\n\n      keepSlidesPosition();\n      setState({\n        isDoingContinousVertical: false\n      });\n    }\n\n    /**\n    * Makes sure lazyload is done for other sections in the viewport that are not the\n    * active one. \n    */\n\n    function lazyLoadOthers() {\n      var hasAutoHeightSections = $(AUTO_HEIGHT_SEL)[0] || isResponsiveMode() && $(AUTO_HEIGHT_RESPONSIVE_SEL)[0]; //quitting when it doesn't apply\n\n      if (!getOptions().lazyLoading || !hasAutoHeightSections) {\n        return;\n      } //making sure to lazy load auto-height sections that are in the viewport\n\n\n      $(SECTION_SEL + ':not(' + ACTIVE_SEL + ')').forEach(function (section) {\n        if (isSectionInViewport(section)) {\n          lazyLoadPanels(getPanelByElement(getState().sections, section));\n        }\n      });\n    }\n    /**\n    * Determines whether a section is in the viewport or not.\n    */\n\n    function isSectionInViewport(el) {\n      var rect = el.getBoundingClientRect();\n      var top = rect.top;\n      var bottom = rect.bottom; //sometimes there's a 1px offset on the bottom of the screen even when the \n      //section's height is the window.innerHeight one. I guess because pixels won't allow decimals.\n      //using this prevents from lazyLoading the section that is not yet visible \n      //(only 1 pixel offset is)\n\n      var pixelOffset = 2;\n      var isTopInView = top + pixelOffset < state.windowsHeight && top > 0;\n      var isBottomInView = bottom > pixelOffset && bottom < state.windowsHeight;\n      return isTopInView || isBottomInView;\n    }\n\n    function tooltipTextHandler() {\n      /*jshint validthis:true */\n      trigger(prev(this), 'click');\n    }\n    /**\n    * Activating the vertical navigation bullets according to the given slide name.\n    */\n\n    function activateNavDots(name, sectionIndex) {\n      var nav = $(SECTION_NAV_SEL)[0];\n\n      if (getOptions().navigation && nav != null && nav.style.display !== 'none') {\n        removeClass($(ACTIVE_SEL, nav), ACTIVE);\n\n        if (name) {\n          addClass($('a[href=\"#' + name + '\"]', nav), ACTIVE);\n        } else {\n          addClass($('a', $('li', nav)[sectionIndex]), ACTIVE);\n        }\n      }\n    }\n    /**\n    * Creates a vertical navigation bar.\n    */\n\n    function addVerticalNavigation() {\n      remove($(SECTION_NAV_SEL));\n      var navigation = doc.createElement('div');\n      navigation.setAttribute('id', SECTION_NAV);\n      var divUl = doc.createElement('ul');\n      navigation.appendChild(divUl);\n      appendTo(navigation, $body);\n      var nav = $(SECTION_NAV_SEL)[0];\n      addClass(nav, 'fp-' + getOptions().navigationPosition);\n\n      if (getOptions().showActiveTooltip) {\n        addClass(nav, SHOW_ACTIVE_TOOLTIP);\n      }\n\n      var li = '';\n\n      for (var i = 0; i < getState().sections.length; i++) {\n        var section = getState().sections[i];\n        var link = '';\n\n        if (getOptions().anchors.length) {\n          link = section.anchor;\n        }\n\n        li += '<li><a href=\"#' + encodeURI(link) + '\"><span class=\"fp-sr-only\">' + getBulletLinkName(section.index(), 'Section') + '</span><span></span></a>'; // Only add tooltip if needed (defined by user)\n\n        var tooltip = getOptions().navigationTooltips[section.index()];\n\n        if (typeof tooltip !== 'undefined' && tooltip !== '') {\n          li += '<div class=\"' + SECTION_NAV_TOOLTIP + ' fp-' + getOptions().navigationPosition + '\">' + tooltip + '</div>';\n        }\n\n        li += '</li>';\n      }\n\n      $('ul', nav)[0].innerHTML = li; //activating the current active section\n\n      var bullet = $('li', $(SECTION_NAV_SEL)[0])[getState().activeSection.index()];\n      addClass($('a', bullet), ACTIVE);\n    } //Scrolls to the section when clicking the navigation bullet\n\n    function sectionBulletHandler(e) {\n      if (e.preventDefault) {\n        preventDefault(e);\n      }\n\n      setState({\n        scrollTrigger: 'verticalNav'\n      });\n      /*jshint validthis:true */\n      // @ts-ignore\n\n      var indexBullet = index(closest(this, SECTION_NAV_SEL + ' li'));\n      EventEmitter.emit(events.scrollPage, {\n        destination: getState().sections[indexBullet]\n      });\n    }\n\n    /**\n    * Sets to active the current menu and vertical nav items.\n    */\n\n    function activateMenuAndNav(anchor, index) {\n      activateMenuElement(anchor);\n      activateNavDots(anchor, index);\n    }\n    /**\n    * Activating the website main menu elements according to the given slide name.\n    */\n\n    function activateMenuElement(name) {\n      if (getOptions().menu && getOptions().menu.length) {\n        $(getOptions().menu).forEach(function (menu) {\n          if (menu != null) {\n            removeClass($(ACTIVE_SEL, menu), ACTIVE);\n            addClass($('[data-menuanchor=\"' + name + '\"]', menu), ACTIVE);\n          }\n        });\n      }\n    }\n\n    new Date().getTime();\n    /**\n     * Triggers the callback once per scroll wheel action.\n     * Based on scrolling speed delay.\n     */\n\n    var oncePerScroll = function () {\n      var canTriggerEvent = true;\n      var prevWheelTime = new Date().getTime();\n      var result;\n      var isScrollingOnInit = !win.fullpage_api;\n      return function (scrollTrigger, callback) {\n        var currentTime = new Date().getTime();\n        var timeThreshold = scrollTrigger === 'wheel' ? getOptions().scrollingSpeed : 100;\n        canTriggerEvent = isScrollingOnInit || currentTime - prevWheelTime >= timeThreshold;\n        isScrollingOnInit = !win.fullpage_api;\n\n        if (canTriggerEvent) {\n          result = callback();\n          prevWheelTime = currentTime;\n        }\n\n        return typeof result !== 'undefined' ? result : true;\n      };\n    }();\n\n    /**\n    * Fires the wheel event once per mouse wheel trigger.\n    */\n\n    function fireCallbackOncePerScroll(callbackName, params) {\n      if (!isFunction(getOptions().beforeLeave)) {\n        return;\n      }\n\n      var result = oncePerScroll(getState().scrollTrigger, function () {\n        return fireCallback(callbackName, params);\n      });\n      return result;\n    }\n\n    FP.moveTo = moveTo;\n\n    FP.getScrollY = function () {\n      return state.scrollY;\n    };\n\n    var g_afterSectionLoadsId;\n    var g_transitionLapseId;\n    EventEmitter.on(events.onDestroy, onDestroy$8);\n    /**\n    * Scrolls the site to the given element and scrolls to the slide if a callback is given.\n    */\n\n    function scrollPage(section, callback, isMovementUp) {\n      var element = section.item;\n\n      if (element == null) {\n        return;\n      } //there's no element to scroll, leaving the function\n\n\n      var dtop = getDestinationPosition(element);\n      var slideAnchorLink;\n      var slideIndex; //local variables\n\n      var v = {\n        \"element\": element,\n        \"callback\": callback,\n        \"isMovementUp\": isMovementUp,\n        \"dtop\": dtop,\n        \"yMovement\": getYmovement(getState().activeSection, element),\n        \"anchorLink\": section.anchor,\n        \"sectionIndex\": section.index(),\n        \"activeSlide\": section.activeSlide ? section.activeSlide.item : null,\n        \"leavingSection\": getState().activeSection.index() + 1,\n        //caching the value of isResizing at the momment the function is called\n        //because it will be checked later inside a setTimeout and the value might change\n        \"localIsResizing\": state.isResizing,\n        \"items\": {\n          \"origin\": getState().activeSection,\n          \"destination\": section\n        },\n        \"direction\": null\n      }; //quiting when destination scroll is the same as the current one\n\n      if (getState().activeSection.item == element && !state.isResizing || getOptions().scrollBar && getScrollTop() === v.dtop && !hasClass(element, AUTO_HEIGHT)) {\n        return;\n      }\n\n      if (v.activeSlide != null) {\n        slideAnchorLink = getAttr(v.activeSlide, 'data-anchor');\n        slideIndex = index(v.activeSlide, null);\n      } //callback (onLeave) if the site is not just resizing and readjusting the slides\n\n\n      if (!v.localIsResizing) {\n        var direction = v.yMovement; //required for continousVertical\n\n        if (typeof isMovementUp !== 'undefined') {\n          direction = isMovementUp ? 'up' : 'down';\n        } //for the callback\n\n\n        v.direction = direction;\n\n        if (isFunction(getOptions().beforeLeave)) {\n          if (fireCallbackOncePerScroll('beforeLeave', v) === false) {\n            return;\n          }\n        }\n\n        if (isFunction(getOptions().onLeave)) {\n          if (!fireCallback('onLeave', v)) {\n            return;\n          }\n        }\n      } // If continuousVertical && we need to wrap around\n\n\n      if (getOptions().autoScrolling && getOptions().continuousVertical && typeof v.isMovementUp !== \"undefined\" && (!v.isMovementUp && v.yMovement == 'up' || // Intending to scroll down but about to go up or\n      v.isMovementUp && v.yMovement == 'down')) {\n        // intending to scroll up but about to go down\n        v = createInfiniteSections(v);\n      } //pausing media of the leaving section (if we are not just resizing, as destinatino will be the same one)\n\n\n      if (!v.localIsResizing) {\n        stopMedia(getState().activeSection.item);\n      }\n\n      addClass(element, ACTIVE);\n      removeClass(siblings(element), ACTIVE);\n      updateState();\n      lazyLoadPanels(section); //preventing from activating the MouseWheelHandler event\n      //more than once if the page is scrolling\n\n      setState({\n        canScroll: FP.test.isTesting\n      });\n      setPageStatus(slideIndex, slideAnchorLink, v.anchorLink);\n      EventEmitter.emit(events.onLeave, v);\n      performMovement(v); //flag to avoid callingn `scrollPage()` twice in case of using anchor links\n\n      setState({\n        lastScrolledDestiny: v.anchorLink\n      }); //avoid firing it twice (as it does also on scroll)\n\n      activateMenuAndNav(v.anchorLink, v.sectionIndex);\n    }\n\n    function onDestroy$8() {\n      clearTimeout(g_afterSectionLoadsId);\n      clearTimeout(g_transitionLapseId);\n    }\n    /**\n    * Returns the destination Y position based on the scrolling direction and\n    * the height of the section.\n    */\n\n\n    function getDestinationPosition(element) {\n      var elementHeight = element.offsetHeight;\n      var elementTop = element.offsetTop; //top of the desination will be at the top of the viewport\n\n      var position = elementTop;\n      var isScrollingDown = elementTop > state.previousDestTop;\n      var sectionBottom = position - getWindowHeight() + elementHeight;\n      var bigSectionsDestination = getOptions().bigSectionsDestination; //is the destination element bigger than the viewport?\n\n      if (elementHeight > getWindowHeight()) {\n        //scrolling up?\n        if (!isScrollingDown && !bigSectionsDestination || bigSectionsDestination === 'bottom') {\n          position = sectionBottom;\n        }\n      } //sections equal or smaller than the viewport height && scrolling down? ||  is resizing and its in the last section\n      else if (isScrollingDown || state.isResizing && next(element) == null) {\n        //The bottom of the destination will be at the bottom of the viewport\n        position = sectionBottom;\n      }\n      /*\n      Keeping record of the last scrolled position to determine the scrolling direction.\n      No conventional methods can be used as the scroll bar might not be present\n      AND the section might not be active if it is auto-height and didnt reach the middle\n      of the viewport.\n      */\n\n\n      setState({\n        previousDestTop: position\n      });\n      return position;\n    }\n    /**\n    * Performs the vertical movement (by CSS3 or by jQuery)\n    */\n\n    function performMovement(v) {\n      setState({\n        touchDirection: 'none',\n        scrollY: Math.round(v.dtop)\n      });\n      EventEmitter.emit(events.onPerformMovement, v);\n      var isFastSpeed = getOptions().scrollingSpeed < 700;\n      var transitionLapse = isFastSpeed ? 700 : getOptions().scrollingSpeed; // using CSS3 translate functionality\n\n      if (getOptions().css3 && getOptions().autoScrolling && !getOptions().scrollBar) {\n        // The first section can have a negative value in iOS 10. Not quite sure why: -0.0142822265625\n        // that's why we round it to 0.\n        var translate3d = 'translate3d(0px, -' + Math.round(v.dtop) + 'px, 0px)';\n        transformContainer(translate3d, true); //even when the scrollingSpeed is 0 there's a little delay, which might cause the\n        //scrollingSpeed to change in case of using silentMoveTo();ç\n\n        if (getOptions().scrollingSpeed) {\n          clearTimeout(g_afterSectionLoadsId);\n          g_afterSectionLoadsId = setTimeout(function () {\n            afterSectionLoads$1(v); //disabling canScroll when using fastSpeed\n\n            setState({\n              canScroll: !isFastSpeed || FP.test.isTesting\n            });\n          }, getOptions().scrollingSpeed);\n        } else {\n          afterSectionLoads$1(v);\n        }\n      } // using JS to animate\n      else {\n        var scrollSettings = getScrollSettings(v.dtop);\n        FP.test.top = -v.dtop + 'px';\n        clearTimeout(g_afterSectionLoadsId);\n        scrollTo(scrollSettings.element, scrollSettings.options, getOptions().scrollingSpeed, function () {\n          if (getOptions().scrollBar) {\n            /* Hack!\n            The timeout prevents setting the most dominant section in the viewport as \"active\" when the user\n            scrolled to a smaller section by using the mousewheel (auto scrolling) rather than draging the scroll bar.\n             When using scrollBar:true It seems like the scroll events still getting propagated even after the scrolling animation has finished.\n            */\n            g_afterSectionLoadsId = setTimeout(function () {\n              afterSectionLoads$1(v);\n            }, 30);\n          } else {\n            afterSectionLoads$1(v); //disabling canScroll when using fastSpeed\n\n            setState({\n              canScroll: !isFastSpeed || FP.test.isTesting\n            });\n          }\n        });\n      } // enabling canScroll after the minimum transition laps\n\n\n      if (isFastSpeed) {\n        clearTimeout(g_transitionLapseId);\n        g_transitionLapseId = setTimeout(function () {\n          setState({\n            canScroll: true\n          });\n        }, transitionLapse);\n      }\n    }\n    /**\n    * Actions to do once the section is loaded.\n    */\n\n\n    function afterSectionLoads$1(v) {\n      setState({\n        isBeyondFullpage: false\n      });\n      continuousVerticalFixSectionOrder(v); //callback (afterLoad) if the site is not just resizing and readjusting the slides\n\n      if (isFunction(getOptions().afterLoad) && !v.localIsResizing) {\n        fireCallback('afterLoad', v);\n      }\n\n      updateState();\n\n      if (!v.localIsResizing) {\n        playMedia(v.element);\n      }\n\n      addClass(v.element, COMPLETELY);\n      removeClass(siblings(v.element), COMPLETELY);\n      lazyLoadOthers();\n      setState({\n        canScroll: true\n      });\n      EventEmitter.emit(events.afterSectionLoads, v);\n\n      if (isFunction(v.callback)) {\n        v.callback();\n      }\n    }\n\n    FP.setFitToSection = setFitToSection;\n    FP.fitToSection = fitToSection;\n    /**\n    * Sets fitToSection\n    */\n\n    function setFitToSection(value, type) {\n      setVariableState('fitToSection', value, type);\n    }\n    /**\n    * Fits the site to the nearest active section\n    */\n\n    function fitToSection() {\n      //checking fitToSection again in case it was set to false before the timeout delay\n      if (state.canScroll && getOptions().fitToSection) {\n        //allows to scroll to an active section and\n        //if the section is already active, we prevent firing callbacks\n        setState({\n          isResizing: true\n        });\n        scrollPage(state.activeSection);\n        setState({\n          isResizing: false\n        });\n      }\n    }\n\n    FP.setResponsive = setResponsive;\n    /**\n    * Checks if the site needs to get responsive and disables autoScrolling if so.\n    * A class `fp-responsive` is added to the plugin's container in case the user wants to use it for his own responsive CSS.\n    */\n\n    function responsive() {\n      var widthLimit = getOptions().responsive || getOptions().responsiveWidth; //backwards compatiblity\n\n      var heightLimit = getOptions().responsiveHeight; //only calculating what we need. Remember its called on the resize event.\n\n      var isBreakingPointWidth = widthLimit && win.innerWidth < widthLimit;\n      var isBreakingPointHeight = heightLimit && win.innerHeight < heightLimit;\n\n      if (widthLimit && heightLimit) {\n        setResponsive(isBreakingPointWidth || isBreakingPointHeight);\n      } else if (widthLimit) {\n        setResponsive(isBreakingPointWidth);\n      } else if (heightLimit) {\n        setResponsive(isBreakingPointHeight);\n      }\n    }\n    /**\n    * Turns fullPage.js to normal scrolling mode when the viewport `width` or `height`\n    * are smaller than the set limit values.\n    */\n\n    function setResponsive(active) {\n      var isResponsive = isResponsiveMode();\n\n      if (active) {\n        if (!isResponsive) {\n          setAutoScrolling(false, 'internal');\n          setFitToSection(false, 'internal');\n          hide($(SECTION_NAV_SEL));\n          addClass($body, RESPONSIVE);\n\n          if (isFunction(getOptions().afterResponsive)) {\n            getOptions().afterResponsive.call(getContainer(), active);\n          }\n        }\n      } else if (isResponsive) {\n        setAutoScrolling(getOriginals().autoScrolling, 'internal');\n        setFitToSection(getOriginals().autoScrolling, 'internal');\n        show($(SECTION_NAV_SEL));\n        removeClass($body, RESPONSIVE);\n\n        if (isFunction(getOptions().afterResponsive)) {\n          getOptions().afterResponsive.call(getContainer(), active);\n        }\n      }\n    }\n    /**\n    * Determines whether fullpage.js is in responsive mode or not.\n    */\n\n\n    function isResponsiveMode() {\n      return hasClass($body, RESPONSIVE);\n    }\n\n    function addTableClass(element) {\n      if (!getOptions().verticalCentered) {\n        return;\n      } // Overflowing sections when scrollOverflow is disabled will be autoHeight\n      // and won't require vertical aligment\n\n\n      if (!getOptions().scrollOverflow && scrollOverflowHandler.shouldBeScrollable(element.item)) {\n        return;\n      }\n\n      if (!scrollOverflowHandler.isScrollable(element)) {\n        //In case we are styling for the 2nd time as in with reponsiveSlides\n        if (!hasClass(element.item, TABLE)) {\n          addClass(element.item, TABLE);\n        }\n      }\n    }\n\n    var startingSection = null;\n    FP.getActiveSection = getActiveSection;\n    function getStartingSection() {\n      return startingSection;\n    }\n    /**\n    * Styling vertical sections\n    */\n\n    function styleSection(section) {\n      var sectionElem = section.item;\n      var hasSlides = section.allSlidesItems.length;\n      var index = section.index(); //if no active section is defined, the 1st one will be the default one\n\n      if (!getState().activeSection && section.isVisible) {\n        addClass(sectionElem, ACTIVE);\n        updateState();\n      }\n\n      if (!startingSection && section.isVisible) {\n        startingSection = getState().activeSection.item;\n      }\n\n      if (getOptions().paddingTop) {\n        css(sectionElem, {\n          'padding-top': getOptions().paddingTop\n        });\n      }\n\n      if (getOptions().paddingBottom) {\n        css(sectionElem, {\n          'padding-bottom': getOptions().paddingBottom\n        });\n      }\n\n      if (typeof getOptions().sectionsColor[index] !== 'undefined') {\n        css(sectionElem, {\n          'background-color': getOptions().sectionsColor[index]\n        });\n      }\n\n      if (typeof getOptions().anchors[index] !== 'undefined') {\n        sectionElem.setAttribute('data-anchor', section.anchor);\n      }\n\n      if (!hasSlides) {\n        addTableClass(section);\n      }\n    }\n    /**\n    * Gets the active section.\n    */\n\n    function getActiveSection() {\n      return getState().activeSection;\n    }\n\n    function getSectionFromPanel(panel) {\n      return panel.isSection ? panel : panel.parent;\n    }\n\n    var g_focusScrollableId;\n    EventEmitter.on(events.bindEvents, bindEvents$b);\n\n    function bindEvents$b() {\n      // We can't focus scrollOverflow before scrolling\n      // to the anchor (if we need to)\n      EventEmitter.on(events.onAfterRenderNoAnchor, afterRender);\n      EventEmitter.on(events.onLeave, scrollOverflowHandler.onLeave);\n      EventEmitter.on(events.onSlideLeave, scrollOverflowHandler.onLeave);\n      EventEmitter.on(events.afterSlideLoads, scrollOverflowHandler.afterLoad);\n      EventEmitter.on(events.afterSectionLoads, scrollOverflowHandler.afterLoad);\n      EventEmitter.on(events.onDestroy, onDestroy$7);\n      docAddEvent('keyup', scrollOverflowHandler.keyUpHandler);\n    }\n\n    function afterRender() {\n      if (getOptions().scrollOverflow && !getOptions().scrollBar) {\n        scrollOverflowHandler.makeScrollable();\n        scrollOverflowHandler.focusScrollable();\n      }\n    }\n\n    function onDestroy$7() {\n      EventEmitter.removeListener(events.onAfterRenderNoAnchor, afterRender);\n      docRemoveEvent('keyup', scrollOverflowHandler.keyUpHandler);\n    }\n\n    var scrollOverflowHandler = {\n      focusedElem: null,\n      shouldFocusScrollable: true,\n      isInnerScrollAllowed: true,\n      timeBeforeReachingLimit: null,\n      timeLastScroll: null,\n      preventScrollWithMouseWheel: function preventScrollWithMouseWheel(e) {\n        var activeSection = getState().activeSection;\n\n        if (!state.canScroll || isInsideIframe() && getOptions().scrollOverflow && scrollOverflowHandler.isScrollable(activeSection) && scrollOverflowHandler.isScrolled(getState().wheelDirection, activeSection.item)) {\n          preventDefault(e);\n          return false;\n        }\n      },\n      preventScrollWithKeyboard: function preventScrollWithKeyboard(e) {\n        if (!isInsideInput() && getOptions().keyboardScrolling) {\n          var directionKeys = [38, 33, 32, 40, 34, 36, 35];\n\n          if (directionKeys.indexOf(e.keyCode) > -1 && !scrollOverflowHandler.isInnerScrollAllowed) {\n            preventDefault(e);\n            return false;\n          }\n        }\n      },\n      keyUpHandler: function keyUpHandler() {\n        scrollOverflowHandler.shouldFocusScrollable = state.canScroll;\n      },\n      // Leaving sections or slides\n      onLeave: function onLeave() {\n        clearTimeout(g_focusScrollableId);\n        scrollOverflowHandler.isInnerScrollAllowed = false;\n      },\n      // Loading sections or slides\n      afterLoad: function afterLoad() {\n        scrollOverflowHandler.isInnerScrollAllowed = false; // Delaying it to avoid issues on Safari when focusing elements #4484 & #4493\n\n        clearTimeout(g_focusScrollableId);\n        g_focusScrollableId = setTimeout(function () {\n          scrollOverflowHandler.shouldFocusScrollable = state.canScroll;\n        }, 200);\n      },\n      // Unfocusing the scrollable element from the orgin section/slide\n      unfocusScrollable: function unfocusScrollable() {\n        if (doc.activeElement === this.focusedElem) {\n          // @ts-ignore\n          this.focusedElem.blur();\n          scrollOverflowHandler.isInnerScrollAllowed = false;\n        }\n      },\n      focusScrollable: function focusScrollable() {\n        if (!getOptions().scrollOverflow || !scrollOverflowHandler.shouldFocusScrollable) {\n          return;\n        }\n\n        scrollOverflowHandler.unfocusScrollable();\n        var scrollableItem = scrollOverflowHandler.getScrollableItem(getState().activeSection.item); // On desktop we focus the scrollable to be able to use the mouse wheel\n        // We avoid it on mobile due to a bug in iOS Safari\n\n        if (scrollableItem && !isTouchDevice && !isTouch) {\n          this.focusedElem = scrollableItem; // Forcing the focus on the next paint \n          // to avoid issue #4484 & #4493 on Safari\n\n          requestAnimationFrame(function () {\n            scrollableItem.focus({\n              preventScroll: true\n            });\n            scrollOverflowHandler.isInnerScrollAllowed = true;\n          });\n        }\n\n        scrollOverflowHandler.shouldFocusScrollable = false;\n      },\n      makeScrollable: function makeScrollable() {\n        if (getOptions().scrollOverflowMacStyle && !isMacDevice) {\n          addClass($body, 'fp-scroll-mac');\n        }\n\n        getState().panels.forEach(function (el) {\n          if (el.slides && el.slides.length) {\n            return;\n          }\n\n          if (hasClass(el.item, AUTO_HEIGHT_RESPONSIVE) && isResponsiveMode()) {\n            return;\n          } else {\n            var item = getSlideOrSection(el.item);\n            var shouldBeScrollable = scrollOverflowHandler.shouldBeScrollable(el.item);\n            var section = getSectionFromPanel(el);\n\n            if (isIE11) {\n              var toggleAction = shouldBeScrollable ? 'addClass' : 'removeClass';\n              utils[toggleAction](section.item, IS_OVERFLOW);\n              utils[toggleAction](el.item, IS_OVERFLOW);\n            } else {\n              addClass(section.item, IS_OVERFLOW);\n              addClass(el.item, IS_OVERFLOW);\n            }\n\n            if (!el.hasScroll) {\n              scrollOverflowHandler.createWrapper(item);\n              scrollOverflowHandler.bindEvents(item);\n            } // updating the state now in case \n            // this is executed on page load (after images load)\n\n\n            el.hasScroll = true;\n          }\n        });\n      },\n      bindEvents: function bindEvents(item) {\n        scrollOverflowHandler.getScrollableItem(item).addEventListener('scroll', scrollOverflowHandler.onPanelScroll);\n        item.addEventListener('wheel', scrollOverflowHandler.preventScrollWithMouseWheel, {\n          passive: false\n        });\n        item.addEventListener('keydown', scrollOverflowHandler.preventScrollWithKeyboard, {\n          passive: false\n        });\n      },\n      createWrapper: function createWrapper(item) {\n        var overflowWrapper = document.createElement('div');\n        overflowWrapper.className = OVERFLOW;\n        wrapInner(item, overflowWrapper);\n        overflowWrapper.setAttribute('tabindex', '-1');\n      },\n      destroyWrapper: function destroyWrapper(item) {\n        var overflowWrapper = $(OVERFLOW_SEL, item)[0];\n\n        if (overflowWrapper) {\n          unwrap(overflowWrapper);\n          item.removeAttribute('tabindex');\n        }\n      },\n      getScrollableItem: function getScrollableItem(sectionItem) {\n        var panel = getSlideOrSection(sectionItem);\n        return $(OVERFLOW_SEL, panel)[0] || panel;\n      },\n      hasScroll: function hasScroll(panelItem) {\n        return hasClass(panelItem, OVERFLOW) || $(OVERFLOW_SEL, panelItem)[0] != null;\n      },\n      isScrollable: function isScrollable(panel) {\n        return panel.isSection && panel.activeSlide ? panel.activeSlide.hasScroll : panel.hasScroll;\n      },\n      shouldBeScrollable: function shouldBeScrollable(item) {\n        var scrollable = scrollOverflowHandler.getScrollableItem(item);\n        return scrollable.scrollHeight > win.innerHeight;\n      },\n      isScrolled: function isScrolled(direction, el) {\n        if (!state.canScroll) {\n          return false;\n        } // we won't allow scrolloverflow on scrollBar:true\n\n\n        if (getOptions().scrollBar) {\n          return true;\n        }\n\n        var scrollableItem = scrollOverflowHandler.getScrollableItem(el);\n\n        if (!getOptions().scrollOverflow || !hasClass(scrollableItem, OVERFLOW) || // Checking the section first \n        // In case they apply to both section + slide #4505\n        hasClass(el, 'fp-noscroll') || // Checking the slide (in case it has)\n        hasClass(getSlideOrSection(el), 'fp-noscroll')) {\n          return true;\n        } // ie11 wrongly calculates scrollHeight when using the CSS style\n        // overflow: auto   It adds 1 more pixel compared to offsetHeight\n\n\n        var ie11offset = isIE11 ? 1 : 0;\n        var positionY = scrollableItem.scrollTop;\n        var isTopReached = direction === 'up' && positionY <= 0;\n        var isBottomReached = direction === 'down' && scrollableItem.scrollHeight <= Math.ceil(scrollableItem.offsetHeight + positionY) + ie11offset;\n        var isScrolled = isTopReached || isBottomReached;\n\n        if (!isScrolled && direction !== 'none') {\n          this.timeBeforeReachingLimit = new Date().getTime();\n        }\n\n        return isScrolled;\n      },\n      shouldMovePage: function shouldMovePage() {\n        this.timeLastScroll = new Date().getTime();\n        var timeDiff = this.timeLastScroll - scrollOverflowHandler.timeBeforeReachingLimit;\n        var isUsingTouch = isTouchDevice || isTouch;\n        var isGrabbing = isUsingTouch && state.isGrabbing;\n        var isNotFirstTimeReachingLimit = state.isUsingWheel && timeDiff > 600;\n        return isGrabbing && timeDiff > 400 || isNotFirstTimeReachingLimit;\n      },\n      onPanelScroll: function () {\n        var prevPosition = 0;\n        return function (e) {\n          var currentPosition = e.target.scrollTop;\n          var direction = state.touchDirection !== 'none' ? state.touchDirection : prevPosition < currentPosition ? 'down' : 'up';\n          prevPosition = currentPosition;\n\n          if (isFunction(getOptions().onScrollOverflow)) {\n            fireCallback('onScrollOverflow', {\n              position: currentPosition,\n              direction: direction\n            });\n          }\n\n          if (hasClass(e.target, OVERFLOW) && state.canScroll) {\n            if (scrollOverflowHandler.isScrolled(direction, e.target) && scrollOverflowHandler.shouldMovePage()) {\n              // Checking again if we have a scrollable content\n              // To avoid issues like #4479 where the scroll event gets\n              // triggered after removing/hidding content if this was scrolled\n              if (scrollOverflowHandler.shouldBeScrollable(getState().activeSection.item)) {\n                EventEmitter.emit(events.onScrollOverflowScrolled, {\n                  direction: direction\n                });\n              }\n            }\n          }\n        };\n      }()\n    };\n\n    var g_afterSlideLoadsId;\n    FP.landscapeScroll = landscapeScroll;\n    EventEmitter.on(events.bindEvents, bindEvents$a);\n\n    function bindEvents$a() {\n      EventEmitter.on(events.onPerformMovement, onPerformMovement);\n    }\n\n    function onPerformMovement() {\n      clearTimeout(g_afterSlideLoadsId);\n      setState({\n        slideMoving: false\n      });\n    }\n    /**\n    * Scrolls horizontal sliders.\n    */\n\n\n    function landscapeScroll(slides, destiny, direction) {\n      var sectionElem = closest(slides, SECTION_SEL);\n      var section = getState().sections.filter(function (section) {\n        return section.item == sectionElem;\n      })[0];\n      var slide = section.slides.filter(function (slide) {\n        return slide.item == destiny;\n      })[0];\n      var v = {\n        \"slides\": slides,\n        \"destiny\": destiny,\n        \"direction\": direction,\n        \"destinyPos\": {\n          \"left\": destiny.offsetLeft\n        },\n        \"slideIndex\": slide.index(),\n        \"section\": sectionElem,\n        \"sectionIndex\": section.index(),\n        \"anchorLink\": section.anchor,\n        \"slidesNav\": $(SLIDES_NAV_SEL, sectionElem)[0],\n        \"slideAnchor\": slide.anchor,\n        \"prevSlide\": section.activeSlide.item,\n        \"prevSlideIndex\": section.activeSlide.index(),\n        \"items\": {\n          \"section\": section,\n          \"origin\": section.activeSlide,\n          \"destination\": slide\n        },\n        //caching the value of isResizing at the momment the function is called\n        //because it will be checked later inside a setTimeout and the value might change\n        \"localIsResizing\": state.isResizing\n      };\n      v.xMovement = getXmovement(v.prevSlideIndex, v.slideIndex);\n      v.direction = v.direction ? v.direction : v.xMovement; //important!! Only do it when not resizing\n\n      if (!v.localIsResizing) {\n        //preventing from scrolling to the next/prev section when using scrollHorizontally\n        setState({\n          canScroll: false\n        });\n      }\n\n      if (getOptions().onSlideLeave) {\n        //if the site is not just resizing and readjusting the slides\n        if (!v.localIsResizing && v.xMovement !== 'none') {\n          if (isFunction(getOptions().onSlideLeave)) {\n            if (fireCallback('onSlideLeave', v) === false) {\n              setState({\n                slideMoving: false\n              });\n              return;\n            }\n          }\n        }\n      }\n\n      addClass(destiny, ACTIVE);\n      removeClass(siblings(destiny), ACTIVE);\n      updateState();\n\n      if (!v.localIsResizing) {\n        stopMedia(v.prevSlide);\n        lazyLoadPanels(slide);\n      }\n\n      toggleControlArrows(v); //only changing the URL if the slides are in the current section (not for resize re-adjusting)\n\n      if (section.isActive && !v.localIsResizing) {\n        setPageStatus(v.slideIndex, v.slideAnchor, v.anchorLink);\n      }\n\n      EventEmitter.emit(events.onSlideLeave, v);\n      performHorizontalMove(slides, v, true);\n    }\n    /**\n    * Performs the horizontal movement. (CSS3 or jQuery)\n    *\n    * @param fireCallback {Boolean} - determines whether or not to fire the callback\n    */\n\n    function performHorizontalMove(slides, v, fireCallback) {\n      var destinyPos = v.destinyPos;\n      activeSlidesNavigation(v.slidesNav, v.slideIndex);\n      setState({\n        scrollX: Math.round(destinyPos.left)\n      });\n\n      if (getOptions().css3) {\n        var translate3d = 'translate3d(-' + Math.round(destinyPos.left) + 'px, 0px, 0px)';\n        FP.test.translate3dH[v.sectionIndex] = translate3d;\n        css(addAnimation($(SLIDES_CONTAINER_SEL, slides)), getTransforms(translate3d));\n        clearTimeout(g_afterSlideLoadsId);\n        g_afterSlideLoadsId = setTimeout(function () {\n          if (fireCallback) {\n            afterSlideLoads(v);\n          }\n        }, getOptions().scrollingSpeed);\n      } else {\n        FP.test.left[v.sectionIndex] = Math.round(destinyPos.left);\n        scrollTo(slides, Math.round(destinyPos.left), getOptions().scrollingSpeed, function () {\n          if (fireCallback) {\n            afterSlideLoads(v);\n          }\n        });\n      }\n    }\n    /**\n    * Retuns `right` or `left` depending on the scrolling movement to reach its destination\n    * from the current slide.\n    */\n\n\n    function getXmovement(fromIndex, toIndex) {\n      if (fromIndex == toIndex) {\n        return 'none';\n      }\n\n      if (fromIndex > toIndex) {\n        return 'left';\n      }\n\n      return 'right';\n    }\n\n    function onDestroy$6() {\n      clearTimeout(g_afterSlideLoadsId);\n    }\n\n    function afterSlideLoads(v) {\n      //if the site is not just resizing and readjusting the slides\n      if (!v.localIsResizing) {\n        if (isFunction(getOptions().afterSlideLoad)) {\n          fireCallback('afterSlideLoad', v);\n        } //needs to be inside the condition to prevent problems with continuousVertical and scrollHorizontally\n        //and to prevent double scroll right after a windows resize\n\n\n        setState({\n          canScroll: true\n        });\n        playMedia(v.destiny);\n        EventEmitter.emit(events.afterSlideLoads, v);\n      } //letting them slide again\n\n\n      setState({\n        slideMoving: false\n      });\n    }\n\n    /**\n    * Slides silently (with no animation) the active slider to the given slide.\n    * @param noCallback {bool} true or defined -> no callbacks\n    */\n\n    function silentLandscapeScroll(activeSlide, noCallbacks) {\n      setScrollingSpeed(0, 'internal');\n\n      if (typeof noCallbacks !== 'undefined') {\n        //preventing firing callbacks afterSlideLoad etc.\n        setState({\n          isResizing: true\n        });\n      }\n\n      landscapeScroll(closest(activeSlide, SLIDES_WRAPPER_SEL), activeSlide);\n\n      if (typeof noCallbacks !== 'undefined') {\n        setState({\n          isResizing: false\n        });\n      }\n\n      setScrollingSpeed(getOriginals().scrollingSpeed, 'internal');\n    }\n\n    var g_prevActiveSectionIndex = null;\n    var g_prevActiveSlideIndex = null;\n    EventEmitter.on(events.onDestroyAll, onDestroyAll);\n\n    function onDestroyAll() {\n      g_prevActiveSectionIndex = null;\n      g_prevActiveSlideIndex = null;\n    }\n    /** \n     * Updates the state of the app.\n     */\n\n\n    function updateState() {\n      state.activeSection = null;\n      state.sections.map(function (section) {\n        var isActive = hasClass(section.item, ACTIVE);\n        section.isActive = isActive;\n        section.hasScroll = scrollOverflowHandler.hasScroll(section.item);\n\n        if (isActive) {\n          state.activeSection = section;\n        }\n\n        if (section.slides.length) {\n          section.activeSlide = null;\n          section.slides.map(function (slide) {\n            var isActiveSlide = hasClass(slide.item, ACTIVE);\n            slide.hasScroll = scrollOverflowHandler.hasScroll(section.item);\n            slide.isActive = isActiveSlide;\n\n            if (isActiveSlide) {\n              section.activeSlide = slide;\n            }\n          });\n        }\n      });\n      scrollToNewActivePanel();\n    }\n    function updateStructuralState() {\n      var allSectionItems = $(getOptions().sectionSelector, getContainer());\n      var sectionsItems = getVisible(allSectionItems);\n      var allSections = Array.from(allSectionItems).map(function (item) {\n        return new SectionPanel(item);\n      });\n      var sections = allSections.filter(function (item) {\n        return item.isVisible;\n      });\n      var slides = sections.reduce(function (acc, section) {\n        return acc.concat(section.slides);\n      }, []); // keeping track of the previously active section\n\n      g_prevActiveSectionIndex = getPrevActivePanelIndex(state.activeSection);\n      g_prevActiveSlideIndex = getPrevActivePanelIndex(state.activeSection ? state.activeSection.activeSlide : null);\n      state.numSections = sectionsItems.length;\n      state.numSlides = sections.reduce(function (acc, section) {\n        return acc + section.slides.length;\n      }, 0);\n      state.sections = sections;\n      state.sectionsIncludingHidden = allSections;\n      state.slides = slides;\n      state.panels = state.sections.concat(state.slides);\n    }\n\n    function getPrevActivePanelIndex(activePanel) {\n      if (!activePanel) {\n        return null;\n      }\n\n      var prevActivePanelItem = activePanel ? activePanel.item : null;\n      var hiddenPanels = activePanel.isSection ? state.sectionsIncludingHidden : state.activeSection.slidesIncludingHidden;\n\n      if (prevActivePanelItem) {\n        var panel = getPanelByElement(hiddenPanels, prevActivePanelItem);\n        return panel ? panel.index() : null;\n      }\n\n      return null;\n    }\n    /**\n     * When changes in the DOM take place there's a change \n     * the active section is now hidden or removed. \n     * fullPage.js will scroll to the closest section nearby.\n     */\n\n\n    function scrollToNewActivePanel() {\n      var activeSection = state.activeSection;\n      var activeSectionHasSlides = state.activeSection ? state.activeSection.slides.length : false;\n      var activeSlide = state.activeSection ? state.activeSection.activeSlide : null; // Hidding / removing the active section ?\n\n      if (!activeSection && state.sections.length && !getState().isBeyondFullpage && g_prevActiveSectionIndex !== null) {\n        var newActiveSection = getNewActivePanel(g_prevActiveSectionIndex, state.sections);\n\n        if (newActiveSection) {\n          state.activeSection = newActiveSection;\n          state.activeSection.isActive = true;\n          addClass(state.activeSection.item, ACTIVE);\n        }\n\n        if (state.activeSection) {\n          silentScroll(state.activeSection.item.offsetTop);\n        }\n      }\n\n      if (activeSectionHasSlides && !activeSlide && g_prevActiveSlideIndex !== null) {\n        var newActiveSlide = getNewActivePanel(g_prevActiveSlideIndex, state.activeSection.slides);\n\n        if (newActiveSlide) {\n          state.activeSection.activeSlide = newActiveSlide;\n          state.activeSection.activeSlide.isActive = true;\n          addClass(state.activeSection.activeSlide.item, ACTIVE);\n        }\n\n        if (state.activeSection.activeSlide) {\n          silentLandscapeScroll(state.activeSection.activeSlide.item, 'internal');\n        }\n      }\n    }\n\n    function getNewActivePanel(prevActivePanelIndex, siblings) {\n      var newActiveSection;\n      var prevIndex = prevActivePanelIndex - 1;\n      var nextIndex = prevActivePanelIndex;\n\n      do {\n        newActiveSection = siblings[prevIndex] || siblings[nextIndex];\n\n        if (newActiveSection) {\n          break;\n        }\n\n        prevIndex = prevIndex - 1;\n        nextIndex = nextIndex + 1;\n      } while (prevIndex >= 0 || nextIndex < siblings.length);\n\n      return newActiveSection;\n    }\n    /**\n    * Section object\n    */\n\n\n    var SectionPanel = function SectionPanel(el) {\n      var _this = this;\n\n      [].push.call(arguments, getOptions().sectionSelector);\n      Item.apply(this, arguments);\n      this.allSlidesItems = $(getOptions().slideSelector, el);\n      this.slidesIncludingHidden = Array.from(this.allSlidesItems).map(function (item) {\n        return new SlidePanel(item, _this);\n      });\n      this.slides = this.slidesIncludingHidden.filter(function (slidePanel) {\n        return slidePanel.isVisible;\n      });\n      this.activeSlide = this.slides.length ? this.slides.filter(function (slide) {\n        return slide.isActive;\n      })[0] || this.slides[0] : null;\n    };\n    SectionPanel.prototype = Item.prototype;\n    SectionPanel.prototype.constructor = SectionPanel;\n    /**\n    * Slide object\n    */\n\n    var SlidePanel = function SlidePanel(el, section) {\n      this.parent = section;\n      Item.call(this, el, getOptions().slideSelector);\n    };\n\n    SlidePanel.prototype = Item.prototype;\n    SlidePanel.prototype.constructor = SectionPanel;\n\n    /**\n    * Adds internal classes to be able to provide customizable selectors\n    * keeping the link with the style sheet.\n    */\n\n    function addInternalSelectors() {\n      addClass($(getOptions().sectionSelector, getContainer()), SECTION);\n      addClass($(getOptions().slideSelector, getContainer()), SLIDE);\n    }\n\n    /**\n    * Styles the horizontal slides for a section.\n    */\n\n    function styleSlides(section) {\n      var numSlides = section.slides.length;\n      var slidesElems = section.allSlidesItems;\n      var slides = section.slides;\n      var sliderWidth = numSlides * 100;\n      var slideWidth = 100 / numSlides;\n\n      if (!$(SLIDES_WRAPPER_SEL, section.item)[0]) {\n        var slidesWrapper = doc.createElement('div');\n        slidesWrapper.className = SLIDES_WRAPPER; //fp-slides\n\n        wrapAll(slidesElems, slidesWrapper);\n        var slidesContainer = doc.createElement('div');\n        slidesContainer.className = SLIDES_CONTAINER; //fp-slidesContainer\n\n        wrapAll(slidesElems, slidesContainer);\n      }\n\n      css($(SLIDES_CONTAINER_SEL, section.item), {\n        'width': sliderWidth + '%'\n      });\n\n      if (numSlides > 1) {\n        if (getOptions().controlArrows) {\n          createSlideArrows(section);\n        }\n\n        if (getOptions().slidesNavigation) {\n          addSlidesNavigation(section);\n        }\n      }\n\n      slides.forEach(function (slide) {\n        css(slide.item, {\n          'width': slideWidth + '%'\n        });\n\n        if (getOptions().verticalCentered) {\n          addTableClass(slide);\n        }\n      });\n      var startingSlide = section.activeSlide || null; //if the slide won't be an starting point, the default will be the first one\n      //the active section isn't the first one? Is not the first slide of the first section? Then we load that section/slide by default.\n\n      if (startingSlide != null && state.activeSection && (state.activeSection.index() !== 0 || state.activeSection.index() === 0 && startingSlide.index() !== 0)) {\n        silentLandscapeScroll(startingSlide.item, 'internal');\n      } else {\n        addClass(slidesElems[0], ACTIVE);\n      }\n    }\n\n    var g_wrapperObserver;\n    var g_wrapperObserveConfig = {\n      attributes: false,\n      subtree: true,\n      childList: true,\n      characterData: true\n    };\n    EventEmitter.on(events.bindEvents, bindEvents$9);\n    EventEmitter.on(events.onDestroy, unbindEvents);\n    FP[\"render\"] = onContentChange;\n\n    function bindEvents$9() {\n      if (getOptions().observer && \"MutationObserver\" in window && $(WRAPPER_SEL)[0]) {\n        g_wrapperObserver = createObserver($(WRAPPER_SEL)[0], onContentChange, g_wrapperObserveConfig);\n      }\n\n      EventEmitter.on(events.contentChanged, onContentChange);\n    }\n\n    function unbindEvents() {\n      if (g_wrapperObserver) {\n        g_wrapperObserver.disconnect();\n        g_wrapperObserver = null;\n      }\n    }\n    /**\n     * Creates a Mutation observer.\n     */\n\n\n    function createObserver(target, callback, config) {\n      var observer = new MutationObserver(callback);\n      observer.observe(target, config);\n      return observer;\n    }\n\n    function didSlidesChange() {\n      return getVisible($(getOptions().slideSelector, getContainer())).length !== getState().numSlides;\n    }\n\n    function didSectionsChange() {\n      return getVisible($(getOptions().sectionSelector, getContainer())).length !== getState().numSections;\n    }\n\n    function didSectionsOrSlidesChange() {\n      return didSlidesChange() || didSectionsChange();\n    }\n    /**\n     * Listen to changes on sections and fires reBuild\n     * when those changes affect the section height.\n     */\n\n\n    function onContentChange(mutations) {\n      var _didSlidesChange = didSlidesChange();\n\n      if (didSectionsOrSlidesChange() && !state.isDoingContinousVertical) {\n        if (getOptions().observer && g_wrapperObserver) {\n          // Temporally disabling the observer while \n          // we modidy the DOM again\n          g_wrapperObserver.disconnect();\n        }\n\n        updateStructuralState();\n        updateState(); // Removing navs and anchors options\n\n        getOptions().anchors = [];\n        remove($(SECTION_NAV_SEL));\n        addInternalSelectors();\n        setOptionsFromDOM();\n\n        if (getOptions().navigation) {\n          addVerticalNavigation();\n        }\n\n        if (_didSlidesChange) {\n          remove($(SLIDES_NAV_SEL));\n          remove($(SLIDES_ARROW_SEL));\n        }\n\n        getState().sections.forEach(function (section) {\n          if (section.slides.length) {\n            if (_didSlidesChange) {\n              styleSlides(section);\n            }\n          } else {\n            styleSection(section);\n          }\n        });\n      }\n\n      if (getOptions().observer && g_wrapperObserver && $(WRAPPER_SEL)[0]) {\n        g_wrapperObserver.observe($(WRAPPER_SEL)[0], g_wrapperObserveConfig);\n      }\n    }\n\n    var supportsPassiveEvents = function () {\n      //cheks for passive event support\n      var g_supportsPassive = false;\n\n      try {\n        var opts = Object.defineProperty({}, 'passive', {\n          get: function get() {\n            g_supportsPassive = true;\n          }\n        });\n        windowAddEvent(\"testPassive\", null, opts);\n        windowRemoveEvent(\"testPassive\", null, opts);\n      } catch (e) {}\n\n      return function () {\n        return g_supportsPassive;\n      };\n    }();\n\n    function getPassiveOptionsIfPossible() {\n      return supportsPassiveEvents() ? {\n        passive: false\n      } : false;\n    }\n\n    var wheelDataHandler = function () {\n      var _prevTime = new Date().getTime();\n\n      var _scrollings = [];\n      var isScrollingVertically;\n      var direction;\n      return {\n        registerEvent: function registerEvent(e) {\n          e = e || win.event;\n          var value = e.wheelDelta || -e.deltaY || -e.detail;\n          var delta = Math.max(-1, Math.min(1, value));\n          var horizontalDetection = typeof e.wheelDeltaX !== 'undefined' || typeof e.deltaX !== 'undefined';\n          isScrollingVertically = Math.abs(e.wheelDeltaX) < Math.abs(e.wheelDelta) || Math.abs(e.deltaX) < Math.abs(e.deltaY) || !horizontalDetection;\n          var curTime = new Date().getTime();\n          direction = delta < 0 ? 'down' : 'up'; //Limiting the array to 150 (lets not waste memory!)\n\n          if (_scrollings.length > 149) {\n            _scrollings.shift();\n          } //keeping record of the previous scrollings\n\n\n          _scrollings.push(Math.abs(value)); //time difference between the last scroll and the current one\n\n\n          var timeDiff = curTime - _prevTime;\n          _prevTime = curTime; //haven't they scrolled in a while?\n          //(enough to be consider a different scrolling action to scroll another section)\n\n          if (timeDiff > 200) {\n            //emptying the array, we dont care about old scrollings for our averages\n            _scrollings = [];\n          }\n        },\n        isAccelerating: function isAccelerating() {\n          var averageEnd = getAverage(_scrollings, 10);\n          var averageMiddle = getAverage(_scrollings, 70);\n          var isAccelerating = averageEnd >= averageMiddle;\n          return _scrollings.length ? isAccelerating && isScrollingVertically : false;\n        },\n        getDirection: function getDirection() {\n          return direction;\n        }\n      };\n    }();\n\n    function scrollBeyondFullPage() {\n      var dtop = getDestinationOffset();\n      var scrollSettings = getScrollSettings(dtop);\n      FP.test.top = -dtop + 'px';\n      setState({\n        canScroll: false\n      });\n      scrollTo(scrollSettings.element, scrollSettings.options, getOptions().scrollingSpeed, function () {\n        setTimeout(function () {\n          setState({\n            isBeyondFullpage: true\n          });\n          setState({\n            canScroll: true\n          });\n        }, 30);\n      });\n    }\n    function onKeyDown() {\n      if (!isFullPageAbove()) {\n        return;\n      } else {\n        scrollUpToFullpage();\n      }\n    }\n    function scrollUpToFullpage() {\n      var scrollSettings = getScrollSettings(getLast(getState().sections).item.offsetTop);\n      setState({\n        canScroll: false\n      });\n      scrollTo(scrollSettings.element, scrollSettings.options, getOptions().scrollingSpeed, function () {\n        setState({\n          canScroll: true\n        });\n        setState({\n          isBeyondFullpage: false\n        });\n        setState({\n          isAboutToScrollToFullPage: false\n        });\n      });\n    }\n\n    function getDestinationOffset() {\n      if (!getOptions().css3) {\n        return getLast(getState().sections).item.offsetTop + getLast(getState().sections).item.offsetHeight;\n      }\n\n      return getScrollTop() + getWindowHeight();\n    }\n\n    function beyondFullPageHandler(container, e) {\n      new Date().getTime();\n      var pauseScroll = getState().isBeyondFullpage && container.getBoundingClientRect().bottom >= 0 && wheelDataHandler.getDirection() === 'up';\n      var g_isAboutToScrollToFullPage = getState().isAboutToScrollToFullPage;\n\n      if (g_isAboutToScrollToFullPage) {\n        preventDefault(e);\n        return false;\n      }\n\n      if (getState().isBeyondFullpage) {\n        if (!pauseScroll) {\n          keyframeTime('set', 'beyondFullpage', 1000);\n        } else {\n          var shouldSetFixedPosition = !g_isAboutToScrollToFullPage && (!keyframeTime('isNewKeyframe', 'beyondFullpage') || !wheelDataHandler.isAccelerating());\n          var scrollSettings;\n\n          if (shouldSetFixedPosition) {\n            scrollSettings = getScrollSettings(getLast(getState().sections).item.offsetTop + getLast(getState().sections).item.offsetHeight);\n            scrollSettings.element.scrollTo(0, scrollSettings.options);\n            setState({\n              isAboutToScrollToFullPage: false\n            });\n            preventDefault(e);\n            return false;\n          } else if (wheelDataHandler.isAccelerating()) {\n            pauseScroll = false;\n            setState({\n              isAboutToScrollToFullPage: true\n            });\n            setState({\n              scrollTrigger: 'wheel'\n            });\n            scrollUpToFullpage();\n            preventDefault(e);\n            return false;\n          }\n        }\n\n        if (!g_isAboutToScrollToFullPage) {\n          // allow normal scrolling, but quitting\n          if (!pauseScroll) {\n            return true;\n          }\n        }\n      }\n    }\n\n    var keyframeTime = function () {\n      var isNew = false;\n      var frames = {};\n      var timeframes = {};\n      return function (action, name, timeframe) {\n        switch (action) {\n          case 'set':\n            frames[name] = new Date().getTime();\n            timeframes[name] = timeframe;\n            break;\n\n          case 'isNewKeyframe':\n            var current = new Date().getTime();\n            isNew = current - frames[name] > timeframes[name];\n            break;\n        }\n\n        return isNew;\n      };\n    }();\n\n    FP.moveSectionDown = moveSectionDown;\n    /**\n    * Moves the page down one section.\n    */\n\n    function moveSectionDown() {\n      var next = getState().activeSection.next(); //looping to the top if there's no more sections below\n\n      if (!next && (getOptions().loopBottom || getOptions().continuousVertical)) {\n        next = getState().sections[0];\n      }\n\n      if (next != null) {\n        scrollPage(next, null, false);\n      } else if (hasContentBeyondFullPage()) {\n        EventEmitter.emit(events.scrollBeyondFullpage);\n      }\n    }\n\n    function hasContentBeyondFullPage() {\n      return getContainer().scrollHeight < $body.scrollHeight && getOptions().scrollBar && getOptions().scrollBeyondFullpage;\n    }\n\n    FP.moveSectionUp = moveSectionUp;\n    /**\n    * Moves the page up one section.\n    */\n\n    function moveSectionUp() {\n      var prev = getState().activeSection.prev(); //looping to the bottom if there's no more sections above\n\n      if (!prev && (getOptions().loopTop || getOptions().continuousVertical)) {\n        prev = getLast(getState().sections);\n      }\n\n      if (prev != null) {\n        scrollPage(prev, null, true);\n      }\n    }\n\n    var oldPageY = 0;\n    /**\n    * Detecting the direction of the mouse movement.\n    * Used only for the middle button of the mouse.\n    */\n\n    function mouseMoveHandler(e) {\n      if (!getOptions().autoScrolling) {\n        return;\n      }\n\n      if (state.canScroll) {\n        // moving up\n        if (e.pageY < oldPageY && getIsScrollAllowed().m.up) {\n          moveSectionUp();\n        } // moving down\n        else if (e.pageY > oldPageY && getIsScrollAllowed().m.down) {\n          moveSectionDown();\n        }\n      }\n\n      oldPageY = e.pageY;\n    }\n    function setOldPageY(value) {\n      oldPageY = value;\n    }\n\n    /**\n    * Determines the way of scrolling up or down:\n    * by 'automatically' scrolling a section or by using the default and normal scrolling.\n    */\n\n    function scrolling(type) {\n      if (!getIsScrollAllowed().m[type]) {\n        return;\n      }\n\n      var scrollSection = type === 'down' ? moveSectionDown : moveSectionUp;\n\n      if (getOptions().scrollOverflow && scrollOverflowHandler.isScrollable(getState().activeSection)) {\n        //is the scrollbar at the start/end of the scroll?\n        if (scrollOverflowHandler.isScrolled(type, getState().activeSection.item) && scrollOverflowHandler.shouldMovePage()) {\n          scrollSection();\n        }\n      } else {\n        scrollSection();\n      }\n    }\n\n    var touchStartY = 0;\n    var touchStartX = 0;\n    var touchEndY = 0;\n    var touchEndX = 0;\n    var MSPointer = getMSPointer();\n    var pointers = {\n      touchmove: 'ontouchmove' in window ? 'touchmove' : MSPointer ? MSPointer.move : null,\n      touchstart: 'ontouchstart' in window ? 'touchstart' : MSPointer ? MSPointer.down : null\n    };\n    /**\n    * Adds the possibility to auto scroll through sections on touch devices.\n    */\n\n    function addTouchHandler() {\n      if (!pointers.touchmove) {\n        return;\n      }\n\n      if (isTouchDevice || isTouch) {\n        if (getOptions().autoScrolling) {\n          $body.removeEventListener(pointers.touchmove, preventBouncing, {\n            passive: false\n          });\n          $body.addEventListener(pointers.touchmove, preventBouncing, {\n            passive: false\n          });\n        }\n\n        var touchWrapper = getOptions().touchWrapper;\n        touchWrapper.removeEventListener(pointers.touchstart, touchStartHandler);\n        touchWrapper.removeEventListener(pointers.touchmove, touchMoveHandler, {\n          passive: false\n        });\n        touchWrapper.addEventListener(pointers.touchstart, touchStartHandler);\n        touchWrapper.addEventListener(pointers.touchmove, touchMoveHandler, {\n          passive: false\n        });\n      }\n    }\n    /**\n    * Removes the auto scrolling for touch devices.\n    */\n\n    function removeTouchHandler() {\n      if (!pointers.touchmove) {\n        return;\n      }\n\n      if (isTouchDevice || isTouch) {\n        // normalScrollElements requires it off #2691\n        if (getOptions().autoScrolling) {\n          $body.removeEventListener(pointers.touchmove, touchMoveHandler, {\n            passive: false\n          });\n          $body.removeEventListener(pointers.touchmove, preventBouncing, {\n            passive: false\n          });\n        }\n\n        var touchWrapper = getOptions().touchWrapper;\n        touchWrapper.removeEventListener(pointers.touchstart, touchStartHandler);\n        touchWrapper.removeEventListener(pointers.touchmove, touchMoveHandler, {\n          passive: false\n        });\n      }\n    }\n    /* Detecting touch events\n\n    * As we are changing the top property of the page on scrolling, we can not use the traditional way to detect it.\n    * This way, the touchstart and the touch moves shows an small difference between them which is the\n    * used one to determine the direction.\n    */\n\n    function touchMoveHandler(e) {\n      var activeSection = closest(e.target, SECTION_SEL) || getState().activeSection.item;\n      var hasActiveSectionOverflow = scrollOverflowHandler.isScrollable(getState().activeSection);\n\n      if (isReallyTouch(e)) {\n        setState({\n          isGrabbing: true,\n          isUsingWheel: false\n        });\n\n        if (getOptions().autoScrolling) {\n          if (hasActiveSectionOverflow && !state.canScroll || getOptions().scrollBar) {\n            //preventing the easing on iOS devices\n            preventDefault(e);\n          }\n        }\n\n        var touchEvents = getEventsPage(e);\n        touchEndY = touchEvents.y;\n        touchEndX = touchEvents.x;\n        var isVerticalMovementEnough = Math.abs(touchStartY - touchEndY) > win.innerHeight / 100 * getOptions().touchSensitivity;\n        var isHorizontalMovementEnough = Math.abs(touchStartX - touchEndX) > getWindowWidth() / 100 * getOptions().touchSensitivity;\n        var isHorizontalPredominantMove = $(SLIDES_WRAPPER_SEL, activeSection).length && Math.abs(touchStartX - touchEndX) > Math.abs(touchStartY - touchEndY);\n        var directionH = touchStartX > touchEndX ? 'right' : 'left';\n        var directionV = touchStartY > touchEndY ? 'down' : 'up';\n        var direction = isHorizontalPredominantMove ? directionH : directionV;\n        setState({\n          touchDirection: direction\n        }); //if movement in the X axys is greater than in the Y and the currect section has slides...\n\n        if (isHorizontalPredominantMove) {\n          //is the movement greater than the minimum resistance to scroll?\n          if (!state.slideMoving && isHorizontalMovementEnough) {\n            if (touchStartX > touchEndX) {\n              if (getIsScrollAllowed().m.right) {\n                EventEmitter.emit(events.moveSlideRight, {\n                  section: activeSection\n                });\n              }\n            } else {\n              if (getIsScrollAllowed().m.left) {\n                EventEmitter.emit(events.moveSlideLeft, {\n                  section: activeSection\n                });\n              }\n            }\n          }\n        } //vertical scrolling (only when autoScrolling is enabled)\n        else if (getOptions().autoScrolling && state.canScroll) {\n          //is the movement greater than the minimum resistance to scroll?\n          if (isVerticalMovementEnough) {\n            scrolling(directionV);\n          }\n        }\n      }\n    }\n    /**\n    * As IE >= 10 fires both touch and mouse events when using a mouse in a touchscreen\n    * this way we make sure that is really a touch event what IE is detecting.\n    */\n\n\n    function isReallyTouch(e) {\n      //if is not IE   ||  IE is detecting `touch` or `pen`\n      return typeof e.pointerType === 'undefined' || e.pointerType != 'mouse';\n    }\n    /**\n    * Handler for the touch start event.\n    */\n\n\n    function touchStartHandler(e) {\n      //stopping the auto scroll to adjust to a section\n      if (getOptions().fitToSection) {\n        setState({\n          activeAnimation: false\n        });\n      }\n\n      if (isReallyTouch(e)) {\n        var touchEvents = getEventsPage(e);\n        touchStartY = touchEvents.y;\n        touchStartX = touchEvents.x;\n      }\n\n      windowAddEvent('touchend', touchEndHandler);\n    }\n    /**\n    * Handler for the touch end event.\n    */\n\n\n    function touchEndHandler() {\n      windowRemoveEvent('touchend', touchEndHandler);\n      setState({\n        isGrabbing: false\n      });\n    }\n    /**\n    * Gets the pageX and pageY properties depending on the browser.\n    * https://github.com/alvarotrigo/fullPage.js/issues/194#issuecomment-34069854\n    */\n\n\n    function getEventsPage(e) {\n      var events = {};\n      events.y = typeof e.pageY !== 'undefined' && (e.pageY || e.pageX) ? e.pageY : e.touches[0].pageY;\n      events.x = typeof e.pageX !== 'undefined' && (e.pageY || e.pageX) ? e.pageX : e.touches[0].pageX; //in touch devices with scrollBar:true, e.pageY is detected, but we have to deal with touch events. #1008\n\n      if (isTouch && isReallyTouch(e) && getOptions().scrollBar && typeof e.touches !== 'undefined') {\n        events.y = e.touches[0].pageY;\n        events.x = e.touches[0].pageX;\n      }\n\n      return events;\n    }\n    /*\n    * Returns and object with Microsoft pointers (for IE<11 and for IE >= 11)\n    * http://msdn.microsoft.com/en-us/library/ie/dn304886(v=vs.85).aspx\n    */\n\n\n    function getMSPointer() {\n      var pointer; //IE >= 11 & rest of browsers\n\n      if (win.PointerEvent) {\n        pointer = {\n          down: 'pointerdown',\n          move: 'pointermove'\n        };\n      }\n\n      return pointer;\n    }\n    /*\n    * Preventing bouncing in iOS #2285\n    */\n\n\n    function preventBouncing(e) {\n      if (getOptions().autoScrolling && isReallyTouch(e) && getIsScrollAllowed().m.up) {\n        //preventing the easing on iOS devices\n        if (!state.canScroll) {\n          preventDefault(e);\n        }\n      }\n    }\n\n    FP.moveSlideLeft = moveSlideLeft;\n    FP.moveSlideRight = moveSlideRight;\n    /**\n    * Slides a slider to the given direction.\n    * Optional `section` param.\n    */\n\n    function moveSlide(direction, section) {\n      var activeSectionItem = section == null ? getState().activeSection.item : section;\n      var activeSection = getPanelByElement(state.sections, activeSectionItem);\n      var slides = $(SLIDES_WRAPPER_SEL, activeSectionItem)[0]; // more than one slide needed and nothing should be sliding\n\n      if (slides == null || state.slideMoving || activeSection.slides.length < 2) {\n        return;\n      }\n\n      var currentSlide = activeSection.activeSlide;\n      var destiny = direction === 'left' ? currentSlide.prev() : currentSlide.next(); //isn't there a next slide in the secuence?\n\n      if (!destiny) {\n        //respect loopHorizontal setting\n        if (!getOptions().loopHorizontal) return;\n        destiny = direction === 'left' ? getLast(activeSection.slides) : activeSection.slides[0];\n      }\n\n      setState({\n        slideMoving: !FP.test.isTesting\n      });\n      landscapeScroll(slides, destiny.item, direction);\n    }\n    /**\n    * Slides left the slider of the active section.\n    * Optional `section` param.\n    */\n\n    function moveSlideLeft(section) {\n      moveSlide('left', section);\n    }\n    /**\n    * Slides right the slider of the active section.\n    * Optional `section` param.\n    */\n\n    function moveSlideRight(section) {\n      moveSlide('right', section);\n    }\n\n    /**\n    * Gets a section by its anchor / index\n    */\n\n    function getSectionByAnchor(sectionAnchor) {\n      var section = getState().sections.filter(function (section) {\n        return section.anchor === sectionAnchor;\n      })[0];\n\n      if (!section) {\n        var sectionIndex = typeof sectionAnchor !== 'undefined' ? sectionAnchor - 1 : 0;\n        section = getState().sections[sectionIndex];\n      }\n\n      return section;\n    }\n\n    /**\n    * Scrolls the slider to the given slide destination for the given section\n    */\n\n    function scrollSlider(slideElem) {\n      if (slideElem != null) {\n        landscapeScroll(closest(slideElem, SLIDES_WRAPPER_SEL), slideElem);\n      }\n    }\n\n    /**\n    * Scrolls to the given section and slide anchors\n    */\n\n    function scrollPageAndSlide(sectionAnchor, slideAnchor) {\n      var section = getSectionByAnchor(sectionAnchor); //do nothing if there's no section with the given anchor name\n\n      if (section == null) return;\n      var slideElem = getSlideByAnchor(slideAnchor, section); //we need to scroll to the section and then to the slide\n\n      if ((!section.anchor || section.anchor !== state.lastScrolledDestiny) && !hasClass(section.item, ACTIVE)) {\n        scrollPage(section, function () {\n          scrollSlider(slideElem);\n        });\n      } //if we were already in the section\n      else {\n        scrollSlider(slideElem);\n      }\n    }\n    /**\n    * Gets a slide inside a given section by its anchor / index\n    */\n\n    function getSlideByAnchor(slideAnchor, section) {\n      var slide = section.slides.filter(function (slide) {\n        return slide.anchor === slideAnchor;\n      })[0];\n\n      if (slide == null) {\n        slideAnchor = typeof slideAnchor !== 'undefined' ? slideAnchor : 0;\n        slide = section.slides[slideAnchor];\n      }\n\n      return slide ? slide.item : null;\n    }\n\n    FP.moveTo = moveTo$1;\n    /**\n    * Moves the page to the given section and slide.\n    * Anchors or index positions can be used as params.\n    */\n\n    function moveTo$1(sectionAnchor, slideAnchor) {\n      var destiny = getSectionByAnchor(sectionAnchor);\n\n      if (typeof slideAnchor !== 'undefined') {\n        scrollPageAndSlide(sectionAnchor, slideAnchor);\n      } else if (destiny != null) {\n        scrollPage(destiny);\n      }\n    }\n\n    //@ts-check\n    var g_controlPressed;\n    var g_keydownId;\n    var g_elToFocus;\n    EventEmitter.on(events.bindEvents, bindEvents$8);\n\n    function bindEvents$8() {\n      //when opening a new tab (ctrl + t), `control` won't be pressed when coming back.\n      windowAddEvent('blur', blurHandler); //Sliding with arrow keys, both, vertical and horizontal\n\n      docAddEvent('keydown', keydownHandler); //to prevent scrolling while zooming\n\n      docAddEvent('keyup', keyUpHandler);\n      EventEmitter.on(events.onDestroy, onDestroy$5);\n      EventEmitter.on(events.afterSlideLoads, onAfterSlideLoads);\n      EventEmitter.on(events.afterSectionLoads, afterSectionLoads);\n    }\n\n    function onDestroy$5() {\n      clearTimeout(g_keydownId);\n      docRemoveEvent('keydown', keydownHandler);\n      docRemoveEvent('keyup', keyUpHandler);\n    } //Sliding with arrow keys, both, vertical and horizontal\n\n\n    function keydownHandler(e) {\n      clearTimeout(g_keydownId);\n      var keyCode = e.keyCode;\n      var isPressingHorizontalArrows = [37, 39].indexOf(keyCode) > -1;\n      var canScrollWithKeyboard = getOptions().autoScrolling || getOptions().fitToSection || isPressingHorizontalArrows; //tab?\n\n      if (keyCode === 9) {\n        onTab(e);\n      } else if (!isInsideInput() && getOptions().keyboardScrolling && canScrollWithKeyboard) {\n        g_controlPressed = e.ctrlKey;\n        g_keydownId = setTimeout(function () {\n          onkeydown(e);\n        }, 0);\n      }\n    }\n    /**\n    * Keydown event\n    */\n\n\n    function onkeydown(e) {\n      var shiftPressed = e.shiftKey;\n      var activeElement = doc.activeElement;\n      var isMediaFocused = matches(activeElement, 'video') || matches(activeElement, 'audio');\n      var isScrolled = {\n        up: scrollOverflowHandler.isScrolled('up', getState().activeSection.item),\n        down: scrollOverflowHandler.isScrolled('down', getState().activeSection.item)\n      };\n      var isUsingHorizontalArrowKeys = [37, 39].indexOf(e.keyCode) > -1;\n      cancelDirectionKeyEvents(e); //do nothing if we can not scroll or we are not using horizotnal key arrows.\n\n      if (!state.canScroll && !isUsingHorizontalArrowKeys) {\n        return;\n      }\n\n      setState({\n        scrollTrigger: 'keydown'\n      });\n\n      switch (e.keyCode) {\n        //up\n        case 38:\n        case 33:\n          if (getIsScrollAllowed().k.up && isScrolled.up) {\n            if (state.isBeyondFullpage) {\n              EventEmitter.emit(events.onKeyDown, {\n                e: e\n              });\n            } else {\n              moveSectionUp();\n            }\n          } else {\n            scrollOverflowHandler.focusScrollable();\n          }\n\n          break;\n        //down\n\n        case 32:\n          //spacebar\n          if (shiftPressed && getIsScrollAllowed().k.up && !isMediaFocused && isScrolled.up) {\n            moveSectionUp();\n            break;\n          }\n\n        /* falls through */\n\n        case 40:\n        case 34:\n          if (getIsScrollAllowed().k.down && isScrolled.down) {\n            if (state.isBeyondFullpage) {\n              return;\n            } // space bar?\n\n\n            if (e.keyCode !== 32 || !isMediaFocused) {\n              moveSectionDown();\n            }\n          } else {\n            scrollOverflowHandler.focusScrollable();\n          }\n\n          break;\n        //Home\n\n        case 36:\n          if (getIsScrollAllowed().k.up) {\n            moveTo$1(1);\n          }\n\n          break;\n        //End\n\n        case 35:\n          if (getIsScrollAllowed().k.down) {\n            moveTo$1(getState().sections.length);\n          }\n\n          break;\n        //left\n\n        case 37:\n          if (getIsScrollAllowed().k.left) {\n            moveSlideLeft();\n          }\n\n          break;\n        //right\n\n        case 39:\n          if (getIsScrollAllowed().k.right) {\n            moveSlideRight();\n          }\n\n          break;\n\n        default:\n          return;\n        // exit this handler for other keys\n      }\n    } //to prevent scrolling while zooming\n\n\n    function keyUpHandler(e) {\n      if (state.isWindowFocused) {\n        //the keyup gets fired on new tab ctrl + t in Firefox\n        g_controlPressed = e.ctrlKey;\n      }\n    } //when opening a new tab (ctrl + t), `control` won't be pressed when coming back.\n\n\n    function blurHandler() {\n      setState({\n        isWindowFocused: false\n      });\n      g_controlPressed = false;\n    }\n    /**\n    * Makes sure the tab key will only focus elements within the current section/slide\n    * preventing this way from breaking the page.\n    * Based on \"Modals and keyboard traps\"\n    * from https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex\n    */\n\n\n    function onTab(e) {\n      var isShiftPressed = e.shiftKey;\n      var activeElement = doc.activeElement;\n      var focusableElements = getFocusables(getSlideOrSection(getState().activeSection.item));\n\n      function preventAndFocusFirst(e) {\n        preventDefault(e);\n        return focusableElements[0] ? focusableElements[0].focus() : null;\n      } // deactivating tab while scrolling #4550\n\n\n      if (!state.canScroll) {\n        preventDefault(e);\n        return;\n      } //outside any section or slide? Let's not hijack the tab!\n\n\n      if (isFocusOutside(e)) {\n        return;\n      } //is there an element with focus?\n\n\n      if (activeElement) {\n        if (closest(activeElement, SECTION_ACTIVE_SEL + ',' + SECTION_ACTIVE_SEL + ' ' + SLIDE_ACTIVE_SEL) == null) {\n          activeElement = preventAndFocusFirst(e);\n        }\n      } //no element if focused? Let's focus the first one of the section/slide\n      else {\n        preventAndFocusFirst(e);\n      } //when reached the first or last focusable element of the section/slide\n      //we prevent the tab action to keep it in the last focusable element\n\n\n      var isFirstFocusableInSection = activeElement == focusableElements[0];\n      var isLastFocusableInSection = activeElement == focusableElements[focusableElements.length - 1];\n      var isNextItem = !isShiftPressed && isLastFocusableInSection;\n      var isPrevItem = isShiftPressed && isFirstFocusableInSection;\n\n      if (isPrevItem || isNextItem) {\n        preventDefault(e);\n        var focusInfo = getPanelWithFocusable(isPrevItem);\n        var destinationPanel = focusInfo ? focusInfo.panel : null;\n\n        if (destinationPanel) {\n          var destinationSection = destinationPanel.isSection ? destinationPanel : destinationPanel.parent;\n          EventEmitter.emit(events.onScrollPageAndSlide, {\n            sectionAnchor: destinationSection.index() + 1,\n            slideAnchor: destinationPanel.isSection ? 0 : destinationPanel.index()\n          });\n          g_elToFocus = focusInfo.itemToFocus;\n          preventDefault(e);\n        }\n      }\n    }\n\n    function onAfterSlideLoads(v) {\n      focusItem();\n    }\n\n    function afterSectionLoads(v) {\n      if (!closest(g_elToFocus, SLIDE_SEL) || closest(g_elToFocus, SLIDE_ACTIVE_SEL)) {\n        focusItem();\n      }\n    }\n\n    function focusItem() {\n      if (g_elToFocus) {\n        g_elToFocus.focus();\n        g_elToFocus = null;\n      }\n    }\n    /**\n     * Get's the panel containing the element to focus.\n     *\n     */\n\n\n    function getPanelWithFocusable(isPrevItem) {\n      var action = isPrevItem ? 'prevPanel' : 'nextPanel';\n      var focusableElements = [];\n      var panelWithFocusables;\n      var currentPanel = getSlideOrSectionPanel(getActivePanel()[action]());\n\n      do {\n        focusableElements = getFocusables(currentPanel.item);\n\n        if (focusableElements.length) {\n          panelWithFocusables = {\n            panel: currentPanel,\n            itemToFocus: focusableElements[isPrevItem ? focusableElements.length - 1 : 0]\n          };\n        }\n\n        currentPanel = getSlideOrSectionPanel(currentPanel[action]());\n      } while (currentPanel && focusableElements.length === 0);\n\n      return panelWithFocusables;\n    }\n    /**\n    * Gets all the focusable elements inside the passed element.\n    */\n\n\n    function getFocusables(el) {\n      return [].slice.call($(focusableElementsString, el)).filter(function (item) {\n        return getAttr(item, 'tabindex') !== '-1' && //are also not hidden elements (or with hidden parents)\n        item.offsetParent !== null;\n      });\n    }\n    /**\n    * Determines whether the focus is outside fullpage.js sections/slides or not.\n    */\n\n\n    function isFocusOutside(e) {\n      var allFocusables = getFocusables(doc);\n      var currentFocusIndex = allFocusables.indexOf(doc.activeElement);\n      var focusDestinationIndex = e.shiftKey ? currentFocusIndex - 1 : currentFocusIndex + 1;\n      var focusDestination = allFocusables[focusDestinationIndex];\n      var destinationItemSlide = closest(focusDestination, SLIDE_SEL);\n      var destinationItemSection = closest(focusDestination, SECTION_SEL);\n      return !destinationItemSlide && !destinationItemSection;\n    }\n\n    function shouldCancelKeyboardNavigation(e) {\n      // https://keycode.info/for/34\n      // 40 = arrow down\n      // 38 = arrow up\n      // 32 = spacebar\n      // 33  = PageUp\n      // 34 = PageDown\n      var keyControls = [40, 38, 32, 33, 34];\n      return keyControls.indexOf(e.keyCode) > -1 && !state.isBeyondFullpage;\n    } //preventing the scroll with arrow keys & spacebar & Page Up & Down keys\n\n\n    function cancelDirectionKeyEvents(e) {\n      if (shouldCancelKeyboardNavigation(e) && !closest(e.target, OVERFLOW_SEL)) {\n        e.preventDefault();\n      }\n    }\n\n    function getControlPressed() {\n      return g_controlPressed;\n    }\n\n    var prevTime = new Date().getTime();\n    var scrollings = [];\n    FP.setMouseWheelScrolling = setMouseWheelScrolling;\n    /**\n    * Adds or remove the possibility of scrolling through sections by using the mouse wheel or the trackpad.\n    */\n\n    function setMouseWheelScrolling(value) {\n      if (value) {\n        addMouseWheelHandler();\n        addMiddleWheelHandler();\n      } else {\n        removeMouseWheelHandler();\n        removeMiddleWheelHandler();\n      }\n    }\n    /**\n    * Adds the auto scrolling action for the mouse wheel and trackpad.\n    * After this function is called, the mousewheel and trackpad movements will scroll through sections\n    * https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n    */\n\n\n    function addMouseWheelHandler() {\n      var prefix = '';\n\n      var _addEventListener;\n\n      if (win.addEventListener) {\n        _addEventListener = \"addEventListener\";\n      } else {\n        _addEventListener = \"attachEvent\";\n        prefix = 'on';\n      } // detect available wheel event\n\n\n      var support = 'onwheel' in doc.createElement('div') ? 'wheel' : // Modern browsers support \"wheel\"\n      // @ts-ignore\n      doc.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least \"mousewheel\"\n      'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox\n\n      var passiveEvent = getPassiveOptionsIfPossible();\n\n      if (support == 'DOMMouseScroll') {\n        doc[_addEventListener](prefix + 'MozMousePixelScroll', MouseWheelHandler, passiveEvent);\n      } //handle MozMousePixelScroll in older Firefox\n      else {\n        doc[_addEventListener](prefix + support, MouseWheelHandler, passiveEvent);\n      }\n    }\n    /**\n    * Binding the mousemove when the mouse's middle button is pressed\n    */\n\n\n    function addMiddleWheelHandler() {\n      getContainer().addEventListener('mousedown', mouseDownHandler);\n      getContainer().addEventListener('mouseup', mouseUpHandler);\n    }\n    /**\n    * Removes the auto scrolling action fired by the mouse wheel and trackpad.\n    * After this function is called, the mousewheel and trackpad movements won't scroll through sections.\n    */\n\n\n    function removeMouseWheelHandler() {\n      if (doc.addEventListener) {\n        docRemoveEvent('mousewheel', MouseWheelHandler, false); //IE9, Chrome, Safari, Oper\n\n        docRemoveEvent('wheel', MouseWheelHandler, false); //Firefox\n\n        docRemoveEvent('MozMousePixelScroll', MouseWheelHandler, false); //old Firefox\n      } else {\n        // @ts-ignore\n        doc.detachEvent('onmousewheel', MouseWheelHandler); //IE 6/7/8\n      }\n    }\n    /**\n    * Unbinding the mousemove when the mouse's middle button is released\n    */\n\n\n    function removeMiddleWheelHandler() {\n      getContainer().removeEventListener('mousedown', mouseDownHandler);\n      getContainer().removeEventListener('mouseup', mouseUpHandler);\n    }\n    /**\n     * Detecting mousewheel scrolling\n     *\n     * http://blogs.sitepointstatic.com/examples/tech/mouse-wheel/index.html\n     * http://www.sitepoint.com/html5-javascript-mouse-wheel/\n     */\n\n\n    function MouseWheelHandler(e) {\n      var curTime = new Date().getTime();\n      var isNormalScroll = hasClass($(COMPLETELY_SEL)[0], NORMAL_SCROLL);\n      var isScrollAllowedBeyondFullPage = beyondFullPageHandler(getContainer(), e);\n\n      if (!state.isUsingWheel) {\n        setState({\n          isGrabbing: false,\n          isUsingWheel: true,\n          touchDirection: 'none'\n        });\n      } //is scroll allowed?\n\n\n      if (!getIsScrollAllowed().m.down && !getIsScrollAllowed().m.up) {\n        return false;\n      }\n\n      if (isScrollAllowedBeyondFullPage) {\n        return true;\n      } else if (isScrollAllowedBeyondFullPage === false) {\n        preventDefault(e);\n        return false;\n      } //autoscrolling and not zooming?\n\n\n      if (getOptions().autoScrolling && !getControlPressed() && !isNormalScroll) {\n        // cross-browser wheel delta\n        e = e || win.event;\n        var value = e.wheelDelta || -e.deltaY || -e.detail;\n        var delta = Math.max(-1, Math.min(1, value));\n        var horizontalDetection = typeof e.wheelDeltaX !== 'undefined' || typeof e.deltaX !== 'undefined';\n        var isScrollingVertically = Math.abs(e.wheelDeltaX) < Math.abs(e.wheelDelta) || Math.abs(e.deltaX) < Math.abs(e.deltaY) || !horizontalDetection;\n        var direction = delta < 0 ? 'down' : delta > 0 ? 'up' : 'none'; //Limiting the array to 150 (lets not waste memory!)\n\n        if (scrollings.length > 149) {\n          scrollings.shift();\n        } //keeping record of the previous scrollings\n\n\n        scrollings.push(Math.abs(value)); //preventing to scroll the site on mouse wheel when scrollbar is present\n\n        if (getOptions().scrollBar || !getOptions().scrollOverflow) {\n          preventDefault(e);\n        } //time difference between the last scroll and the current one\n\n\n        var timeDiff = curTime - prevTime;\n        prevTime = curTime; //haven't they scrolled in a while?\n        //(enough to be consider a different scrolling action to scroll another section)\n\n        if (timeDiff > 200) {\n          //emptying the array, we dont care about old scrollings for our averages\n          scrollings = [];\n        }\n\n        setState({\n          wheelDirection: direction\n        });\n\n        if (state.canScroll) {\n          var averageEnd = getAverage(scrollings, 10);\n          var averageMiddle = getAverage(scrollings, 70);\n          var isAccelerating = averageEnd >= averageMiddle; //to avoid double swipes...\n\n          if (isAccelerating && isScrollingVertically) {\n            setState({\n              scrollTrigger: 'wheel'\n            }); //scrolling down?\n\n            if (delta < 0) {\n              scrolling('down');\n            } //scrolling up?\n            else {\n              scrolling('up');\n            }\n          }\n        }\n\n        return false;\n      }\n\n      if (getOptions().fitToSection) {\n        //stopping the auto scroll to adjust to a section\n        setState({\n          activeAnimation: false\n        });\n      }\n    } //binding the mousemove when the mouse's middle button is released\n\n\n    function mouseDownHandler(e) {\n      //middle button\n      if (e.which == 2) {\n        setOldPageY(e.pageY);\n        getContainer().addEventListener('mousemove', mouseMoveHandler);\n      }\n    } //unbinding the mousemove when the mouse's middle button is released\n\n\n    function mouseUpHandler(e) {\n      //middle button\n      if (e.which == 2) {\n        getContainer().removeEventListener('mousemove', mouseMoveHandler);\n      }\n    }\n    /**\n    * Adds or remove the mouse wheel hijacking\n    */\n\n\n    function setMouseHijack(value) {\n      if (value) {\n        setMouseWheelScrolling(true);\n        addTouchHandler();\n      } else {\n        setMouseWheelScrolling(false);\n        removeTouchHandler();\n      }\n    }\n\n    var g_canFireMouseEnterNormalScroll = true;\n    EventEmitter.on(events.bindEvents, bindEvents$7);\n\n    function bindEvents$7() {\n      /**\n      * Applying normalScroll elements.\n      * Ignoring the scrolls over the specified selectors.\n      */\n      if (getOptions().normalScrollElements) {\n        ['mouseenter', 'touchstart'].forEach(function (eventName) {\n          forMouseLeaveOrTouch(eventName, false);\n        });\n        ['mouseleave', 'touchend'].forEach(function (eventName) {\n          forMouseLeaveOrTouch(eventName, true);\n        });\n      }\n\n      EventEmitter.on(events.onDestroy, onDestroy$4);\n    }\n\n    function onDestroy$4() {\n      ['mouseenter', 'touchstart', 'mouseleave', 'touchend'].forEach(function (eventName) {\n        docRemoveEvent(eventName, onMouseEnterOrLeave, true); //true is required!\n      });\n    }\n\n    function forMouseLeaveOrTouch(eventName, allowScrolling) {\n      //a way to pass arguments to the onMouseEnterOrLeave function\n      document['fp_' + eventName] = allowScrolling;\n      docAddEvent(eventName, onMouseEnterOrLeave, true); //capturing phase\n    }\n\n    function onMouseEnterOrLeave(e) {\n      var type = e.type;\n      var isInsideOneNormalScroll = false; //onMouseLeave will use the destination target, not the one we are moving away from\n\n      var target = type === 'mouseleave' ? e.toElement || e.relatedTarget : e.target; //coming from closing a normalScrollElements modal or moving outside viewport?\n\n      if (target == document || !target) {\n        setMouseHijack(true);\n        return;\n      }\n\n      if (type === 'touchend') {\n        g_canFireMouseEnterNormalScroll = false;\n        setTimeout(function () {\n          g_canFireMouseEnterNormalScroll = true;\n        }, 800);\n      } //preventing mouseenter event to do anything when coming from a touchEnd event\n      //fixing issue #3576\n\n\n      if (type === 'mouseenter' && !g_canFireMouseEnterNormalScroll) {\n        return;\n      }\n\n      var normalSelectors = getOptions().normalScrollElements.split(',');\n      normalSelectors.forEach(function (normalSelector) {\n        if (!isInsideOneNormalScroll) {\n          var isNormalScrollTarget = matches(target, normalSelector); //leaving a child inside the normalScoll element is not leaving the normalScroll #3661\n\n          var isNormalScrollChildFocused = closest(target, normalSelector);\n\n          if (isNormalScrollTarget || isNormalScrollChildFocused) {\n            if (!FP.shared.isNormalScrollElement) {\n              setMouseHijack(false);\n            }\n\n            FP.shared.isNormalScrollElement = true;\n            isInsideOneNormalScroll = true;\n          }\n        }\n      }); //not inside a single normal scroll element anymore?\n\n      if (!isInsideOneNormalScroll && FP.shared.isNormalScrollElement) {\n        setMouseHijack(true);\n        FP.shared.isNormalScrollElement = false;\n      }\n    }\n\n    FP.silentMoveTo = silentMoveTo;\n    /**\n    * Moves the page to the given section and slide with no animation.\n    * Anchors or index positions can be used as params.\n    */\n\n    function silentMoveTo(sectionAnchor, slideAnchor) {\n      setScrollingSpeed(0, 'internal');\n      moveTo$1(sectionAnchor, slideAnchor);\n      setScrollingSpeed(getOriginals().scrollingSpeed, 'internal');\n    }\n\n    var previousHeight = getWindowHeight();\n    var windowsWidth = getWindowWidth();\n    var g_resizeId;\n    var g_isConsecutiveResize = false;\n    var g_resizeMobileHandlerId;\n    FP.reBuild = reBuild;\n    EventEmitter.on(events.bindEvents, bindEvents$6);\n\n    function bindEvents$6() {\n      // Setting VH correctly in mobile devices\n      resizeHandler(); //when resizing the site, we adjust the heights of the sections, slimScroll...\n\n      windowAddEvent('resize', resizeHandler);\n      EventEmitter.on(events.onDestroy, onDestroy$3);\n    }\n\n    function onDestroy$3() {\n      clearTimeout(g_resizeId);\n      clearTimeout(g_resizeMobileHandlerId);\n      windowRemoveEvent('resize', resizeHandler);\n    }\n    /*\n    * Resize event handler.\n    */\n\n\n    function resizeHandler() {\n      if (!g_isConsecutiveResize) {\n        if (getOptions().autoScrolling && !getOptions().scrollBar || !getOptions().fitToSection) {\n          setSectionsHeight(getWindowHeight());\n        }\n      } // we won't trigger fit to section on page load\n      // otherwise it will scroll to the worng section if using anchors #4613\n\n\n      if (state.isFullpageInitDone) {\n        fitToActiveSection();\n      }\n\n      g_isConsecutiveResize = true; //in order to call the functions only when the resize is finished\n      //http://stackoverflow.com/questions/4298612/jquery-how-to-call-resize-event-only-once-its-finished-resizing    \n\n      clearTimeout(g_resizeId);\n      g_resizeId = setTimeout(function () {\n        //issue #3336 \n        //(some apps or browsers, like Chrome/Firefox for Mobile take time to report the real height)\n        //so we check it 3 times with intervals in that case\n        // for(var i = 0; i< 4; i++){\n        resizeActions();\n        g_isConsecutiveResize = false; // }\n      }, 400);\n    }\n\n    function fitToActiveSection() {\n      if (isTouchDevice) {\n        // Issue #4393 and previously in v3, #3336\n        // (some apps or browsers, like Chrome/Firefox will delay a bit to scroll \n        // to the focused input\n        for (var i = 0; i < 4; i++) {\n          g_resizeMobileHandlerId = setTimeout(function () {\n            window.requestAnimationFrame(function () {\n              // on Android devices the browser scrolls to the focused element\n              // messing up the whole page structure. So we need to update the\n              // translate3d value when the keyboard shows/hides\n              if (getOptions().autoScrolling && !getOptions().scrollBar) {\n                setState({\n                  isResizing: true\n                });\n                silentMoveTo(state.activeSection.index() + 1);\n                setState({\n                  isResizing: false\n                });\n              }\n            });\n          }, 200 * i);\n        }\n      }\n    }\n    /**\n     * Checks if VH units need to be set based on scrolling configuration\n     */\n\n\n    function shouldSetVhUnits() {\n      return !state.isBeyondFullpage && !getOptions().autoScrolling;\n    }\n    /**\n    * When resizing the site, we adjust the heights of the sections, slimScroll...\n    */\n\n\n    function resizeActions() {\n      setState({\n        isResizing: true\n      });\n\n      if (!isTouchDevice || getOptions().adjustOnNavChange) {\n        setSectionsHeight('');\n\n        if (shouldSetVhUnits()) {\n          setVhUnits();\n        }\n      }\n\n      EventEmitter.emit(events.contentChanged);\n      updateState(); //checking if it needs to get responsive\n\n      responsive(); // rebuild immediately on touch devices\n\n      if (isTouchDevice) {\n        var activeElement = doc.activeElement; //if the keyboard is NOT visible\n\n        if (!matches(activeElement, 'textarea') && !matches(activeElement, 'input') && !matches(activeElement, 'select')) {\n          var currentHeight = getWindowHeight(); //making sure the change in the viewport size is enough to force a rebuild. (20 % of the window to avoid problems when hidding scroll bars)\n\n          if (Math.abs(currentHeight - previousHeight) > 20 * Math.max(previousHeight, currentHeight) / 100) {\n            reBuild(true);\n            previousHeight = currentHeight;\n          }\n        }\n      } else {\n        adjustToNewViewport();\n      }\n\n      setState({\n        isResizing: false\n      });\n    }\n    /**\n     * When resizing is finished, we adjust the slides sizes and positions\n     */\n\n\n    function reBuild(resizing) {\n      if (hasClass(getContainer(), DESTROYED)) {\n        return;\n      } //nothing to do if the plugin was destroyed\n      //updating global vars\n\n\n      setState({\n        isResizing: true,\n        windowsHeight: getWindowHeight(),\n        windowsWidth: getWindowWidth()\n      });\n      var sections = getState().sections;\n\n      for (var i = 0; i < sections.length; ++i) {\n        var section = sections[i];\n        var slidesWrap = $(SLIDES_WRAPPER_SEL, section.item)[0];\n        var slides = section.slides; //adjusting the position fo the FULL WIDTH slides...\n\n        if (slides.length > 1) {\n          landscapeScroll(slidesWrap, section.activeSlide.item);\n        }\n      }\n\n      if (getOptions().scrollOverflow) {\n        scrollOverflowHandler.makeScrollable();\n      }\n\n      var sectionIndex = getState().activeSection.index();\n\n      if (!state.isBeyondFullpage) {\n        //isn't it the first section?\n        if (sectionIndex) {\n          //adjusting the position for the current section\n          silentMoveTo(sectionIndex + 1);\n        }\n      }\n\n      setState({\n        isResizing: false\n      });\n\n      if (isFunction(getOptions().afterResize) && resizing) {\n        getOptions().afterResize.call(getContainer(), win.innerWidth, win.innerHeight);\n      }\n\n      if (isFunction(getOptions().afterReBuild) && !resizing) {\n        getOptions().afterReBuild.call(getContainer());\n      }\n\n      trigger(getContainer(), 'afterRebuild');\n    }\n    /**\n    * Adjusts a section to the viewport if it has changed.\n    */\n\n\n    function adjustToNewViewport() {\n      var newWindowHeight = getWindowHeight();\n      var newWindowWidth = getWindowWidth();\n\n      if (state.windowsHeight !== newWindowHeight || windowsWidth !== newWindowWidth) {\n        setState({\n          windowsHeight: newWindowHeight\n        });\n        windowsWidth = newWindowWidth;\n        reBuild(true);\n      }\n    }\n\n    function setSectionsHeight(value) {\n      var propertyValue = value === '' ? '' : value + 'px';\n      getState().sections.forEach(function (section) {\n        css(section.item, {\n          'height': propertyValue\n        });\n      });\n    }\n    /**\n     * Defining the value in px of a VH unit. (Used for autoScrolling: false)\n     * To fix the height issue on mobile devices when using VH units.\n     * https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n     */\n\n\n    function setVhUnits() {\n      // First we get the viewport height and we multiple it by 1% to get a value for a vh unit\n      var vh = win.innerHeight * 0.01; // Then we set the value in the --vh custom property to the root of the document\n\n      doc.documentElement.style.setProperty('--vh', \"\".concat(vh, \"px\"));\n    }\n\n    function getAnchorsURL() {\n      var section;\n      var slide;\n      var hash = win.location.hash;\n\n      if (hash.length) {\n        //getting the anchor link in the URL and deleting the `#`\n        var anchorsParts = hash.replace('#', '').split('/'); //using / for visual reasons and not as a section/slide separator #2803\n\n        var isFunkyAnchor = hash.indexOf('#/') > -1;\n        section = isFunkyAnchor ? '/' + anchorsParts[1] : decodeURIComponent(anchorsParts[0]);\n        var slideAnchor = isFunkyAnchor ? anchorsParts[2] : anchorsParts[1];\n\n        if (slideAnchor && slideAnchor.length) {\n          slide = decodeURIComponent(slideAnchor);\n        }\n      }\n\n      return {\n        section: section,\n        slide: slide\n      };\n    }\n\n    FP.setLockAnchors = setLockAnchors;\n    EventEmitter.on(events.bindEvents, bindEvents$5);\n\n    function bindEvents$5() {\n      //detecting any change on the URL to scroll to the given anchor link\n      //(a way to detect back history button as we play with the hashes on the URL)\n      windowAddEvent('hashchange', hashChangeHandler);\n      EventEmitter.on(events.onDestroy, onDestroy$2);\n    }\n\n    function onDestroy$2() {\n      windowRemoveEvent('hashchange', hashChangeHandler);\n    }\n    /**\n    * Sets lockAnchors\n    */\n\n\n    function setLockAnchors(value) {\n      getOptions().lockAnchors = value;\n    }\n    /**\n    * Detecting any change on the URL to scroll to the given anchor link\n    * (a way to detect back history button as we play with the hashes on the URL)\n    */\n\n\n    function hashChangeHandler() {\n      if (!state.isScrolling && !getOptions().lockAnchors) {\n        var anchors = getAnchorsURL();\n        var sectionAnchor = anchors.section;\n        var slideAnchor = anchors.slide; //when moving to a slide in the first section for the first time (first time to add an anchor to the URL)\n\n        var isFirstSlideMove = typeof state.lastScrolledDestiny === 'undefined';\n        var isFirstScrollMove = typeof state.lastScrolledDestiny === 'undefined' && typeof slideAnchor === 'undefined' && !state.slideMoving;\n\n        if (sectionAnchor && sectionAnchor.length) {\n          /*in order to call scrollpage() only once for each destination at a time\n          It is called twice for each scroll otherwise, as in case of using anchorlinks `hashChange`\n          event is fired on every scroll too.*/\n          if (sectionAnchor && sectionAnchor !== state.lastScrolledDestiny && !isFirstSlideMove || isFirstScrollMove || !state.slideMoving && state.lastScrolledSlide != slideAnchor) {\n            EventEmitter.emit(events.onScrollPageAndSlide, {\n              sectionAnchor: sectionAnchor,\n              slideAnchor: slideAnchor\n            });\n          }\n        }\n      }\n    }\n\n    EventEmitter.on(events.bindEvents, bindEvents$4);\n\n    function bindEvents$4() {\n      docAddEvent('wheel', wheelDataHandler.registerEvent, getPassiveOptionsIfPossible());\n      EventEmitter.on(events.scrollBeyondFullpage, scrollBeyondFullPage);\n      EventEmitter.on(events.onKeyDown, onKeyDown);\n    }\n\n    EventEmitter.on(events.bindEvents, bindEvents$3);\n\n    function bindEvents$3() {\n      EventEmitter.on(events.onClickOrTouch, onClickOrTouch$1);\n    }\n\n    function onClickOrTouch$1(params) {\n      var target = params.target;\n\n      if (closest(target, getOptions().menu + ' [data-menuanchor]')) {\n        menuItemsHandler.call(target, params.e);\n      }\n    } //Menu item handler when not using anchors or using lockAnchors:true\n\n\n    function menuItemsHandler(e) {\n      setState({\n        scrollTrigger: 'menu'\n      });\n\n      if ($(getOptions().menu)[0] && (getOptions().lockAnchors || !getOptions().anchors.length)) {\n        preventDefault(e);\n        var menuAnchorEl = closest(this, '[data-menuanchor]');\n        /*jshint validthis:true */\n\n        EventEmitter.emit(events.onMenuClick, {\n          anchor: getAttr(menuAnchorEl, 'data-menuanchor')\n        });\n      }\n    }\n\n    EventEmitter.on(events.bindEvents, bindEvents$2);\n\n    function bindEvents$2() {\n      EventEmitter.on(events.onClickOrTouch, onClickOrTouch);\n    }\n\n    function onClickOrTouch(params) {\n      var target = params.target;\n\n      if (target && closest(target, SECTION_NAV_SEL + ' a')) {\n        sectionBulletHandler.call(target, params.e);\n      } else if (matches(target, SECTION_NAV_TOOLTIP_SEL)) {\n        tooltipTextHandler.call(target);\n      } else if (matches(target, SLIDES_NAV_LINK_SEL) || closest(target, SLIDES_NAV_LINK_SEL) != null) {\n        slideBulletHandler.call(target, params.e);\n      }\n    }\n\n    var lastScroll = 0;\n    var g_scrollId;\n    var g_scrollId2;\n    EventEmitter.on(events.onDestroy, onDestroy$1); //when scrolling...\n\n    function scrollHandler(e) {\n      var currentSection;\n      var currentSectionElem;\n\n      if (state.isResizing || !getState().activeSection) {\n        return;\n      }\n\n      getLast(getState().sections);\n\n      if (getState().isBeyondFullpage || getState().isAboutToScrollToFullPage) {\n        return;\n      }\n\n      if (!getOptions().autoScrolling || getOptions().scrollBar) {\n        var currentScroll = getScrollTop();\n        var scrollDirection = getScrollDirection(currentScroll);\n        var visibleSectionIndex = 0;\n        var screen_mid = currentScroll + getWindowHeight() / 2.0;\n        var isAtBottom = $body.scrollHeight - getWindowHeight() === currentScroll;\n        var sections = getState().sections;\n        setState({\n          scrollY: currentScroll\n        }); //when using `auto-height` for a small last section it won't be centered in the viewport\n\n        if (isAtBottom) {\n          visibleSectionIndex = sections.length - 1;\n        } //is at top? when using `auto-height` for a small first section it won't be centered in the viewport\n        else if (!currentScroll) {\n          visibleSectionIndex = 0;\n        } //taking the section which is showing more content in the viewport\n        else {\n          for (var i = 0; i < sections.length; ++i) {\n            var section = sections[i].item; // Pick the the last section which passes the middle line of the screen.\n\n            if (section.offsetTop <= screen_mid) {\n              visibleSectionIndex = i;\n            }\n          }\n        }\n\n        if (isCompletelyInViewPort(scrollDirection)) {\n          if (!hasClass(getState().activeSection.item, COMPLETELY)) {\n            addClass(getState().activeSection.item, COMPLETELY);\n            removeClass(siblings(getState().activeSection.item), COMPLETELY);\n          }\n        } //geting the last one, the current one on the screen\n\n\n        currentSection = sections[visibleSectionIndex];\n        currentSectionElem = currentSection.item; //setting the visible section as active when manually scrolling\n        //executing only once the first time we reach the section\n\n        if (!currentSection.isActive) {\n          setState({\n            isScrolling: true\n          });\n          var leavingSection = getState().activeSection.item;\n          var leavingSectionIndex = getState().activeSection.index() + 1;\n          var yMovement = getYmovement(getState().activeSection, currentSectionElem);\n          var anchorLink = currentSection.anchor;\n          var sectionIndex = currentSection.index() + 1;\n          var activeSlide = currentSection.activeSlide;\n          var slideIndex;\n          var slideAnchorLink;\n          var callbacksParams = {\n            activeSection: leavingSection,\n            sectionIndex: sectionIndex - 1,\n            anchorLink: anchorLink,\n            element: currentSectionElem,\n            leavingSection: leavingSectionIndex,\n            direction: yMovement,\n            items: {\n              origin: getState().activeSection,\n              destination: currentSection\n            }\n          };\n\n          if (activeSlide) {\n            slideAnchorLink = activeSlide.anchor;\n            slideIndex = activeSlide.index();\n          }\n\n          if (state.canScroll) {\n            addClass(currentSectionElem, ACTIVE);\n            removeClass(siblings(currentSectionElem), ACTIVE);\n\n            if (isFunction(getOptions().beforeLeave)) {\n              fireCallbackOncePerScroll('beforeLeave', callbacksParams);\n            }\n\n            if (isFunction(getOptions().onLeave)) {\n              fireCallback('onLeave', callbacksParams);\n            }\n\n            if (isFunction(getOptions().afterLoad)) {\n              fireCallback('afterLoad', callbacksParams);\n            }\n\n            stopMedia(leavingSection);\n            lazyLoadPanels(currentSection);\n            playMedia(currentSectionElem);\n            activateMenuAndNav(anchorLink, sectionIndex - 1);\n\n            if (getOptions().anchors.length) {\n              //needed to enter in hashChange event when using the menu with anchor links\n              setState({\n                lastScrolledDestiny: anchorLink\n              });\n            }\n\n            updateState();\n            setPageStatus(slideIndex, slideAnchorLink, anchorLink);\n          } //small timeout in order to avoid entering in hashChange event when scrolling is not finished yet\n\n\n          clearTimeout(g_scrollId);\n          g_scrollId = setTimeout(function () {\n            setState({\n              isScrolling: false\n            });\n          }, 100);\n        }\n\n        if (getOptions().fitToSection && state.canScroll) {\n          clearTimeout(g_scrollId2);\n          g_scrollId2 = setTimeout(function () {\n            var fixedSections = state.sections.filter(function (section) {\n              var sectionValues = section.item.getBoundingClientRect();\n              return Math.round(sectionValues.bottom) === Math.round(getWindowHeight()) || Math.round(sectionValues.top) === 0;\n            }); // No section is fitting the viewport? Let's fix that!\n\n            if (!fixedSections.length) {\n              if (isTouchDevice && isFormElementFocused()) {\n                // Exit early to avoid fixing the section while interacting with form elements\n                return;\n              } else {\n                fitToSection();\n              }\n            }\n          }, getOptions().fitToSectionDelay);\n        }\n      }\n    }\n\n    function isFormElementFocused() {\n      var focusedElement = document.activeElement;\n      if (!focusedElement) return false; // Include only elements that trigger the keyboard on mobile\n\n      return focusedElement.matches('input, textarea');\n    }\n\n    function onDestroy$1() {\n      clearTimeout(g_scrollId);\n      clearTimeout(g_scrollId2);\n    }\n    /**\n    * Gets the directon of the the scrolling fired by the scroll event.\n    */\n\n\n    function getScrollDirection(currentScroll) {\n      var direction = currentScroll > lastScroll ? 'down' : 'up';\n      lastScroll = currentScroll; //needed for auto-height sections to determine if we want to scroll to the top or bottom of the destination\n\n      setState({\n        previousDestTop: currentScroll\n      });\n      return direction;\n    }\n    /**\n    * Determines whether the active section has seen in its whole or not.\n    */\n\n\n    function isCompletelyInViewPort(movement) {\n      var top = getState().activeSection.item.offsetTop;\n      var bottom = top + getWindowHeight();\n\n      if (movement == 'up') {\n        return bottom >= getScrollTop() + getWindowHeight();\n      }\n\n      return top <= getScrollTop();\n    }\n\n    EventEmitter.on(events.bindEvents, bindEvents$1);\n    EventEmitter.on(events.onDestroy, onDestroy);\n\n    function onDestroy() {\n      windowRemoveEvent('scroll', scrollHandler);\n    }\n\n    function bindEvents$1() {\n      windowAddEvent('scroll', scrollHandler);\n      doc.body.addEventListener('scroll', scrollHandler);\n      EventEmitter.on(events.onScrollPageAndSlide, function (params) {\n        scrollPageAndSlide(params.sectionAnchor, params.slideAnchor);\n      });\n      EventEmitter.on(events.onMenuClick, function (params) {\n        moveTo$1(params.anchor, undefined);\n      });\n      EventEmitter.on(events.onScrollOverflowScrolled, function (params) {\n        var scrollSection = params.direction === 'down' ? moveSectionDown : moveSectionUp;\n        scrollSection();\n      });\n      EventEmitter.on(events.scrollPage, function (params) {\n        scrollPage(params.destination);\n      });\n    }\n\n    FP.getActiveSlide = getActiveSlide;\n\n    FP.getScrollX = function () {\n      return state.scrollX;\n    };\n\n    EventEmitter.on(events.bindEvents, bindEvents);\n\n    function bindEvents() {\n      EventEmitter.on(events.onDestroy, onDestroy$6);\n      EventEmitter.on(events.landscapeScroll, function (params) {\n        landscapeScroll(params.slides, params.destination);\n      });\n      EventEmitter.on(events.moveSlideRight, function (params) {\n        moveSlideRight(params.section);\n      });\n      EventEmitter.on(events.moveSlideLeft, function (params) {\n        moveSlideLeft(params.section);\n      });\n      EventEmitter.on(events.afterSectionLoads, updateScrollX);\n    }\n\n    function updateScrollX(params) {\n      var activeSlide = params.items.destination.activeSlide;\n      var scrollX = activeSlide ? Math.round(activeSlide.offsetLeft) : 0;\n      setState({\n        scrollX: scrollX\n      });\n    }\n    /**\n    * Gets the active slide.\n    */\n\n\n    function getActiveSlide() {\n      return nullOrSlide(getState().activeSection.activeSlide);\n    }\n\n    EventEmitter.on(events.bindEvents, init$1);\n\n    function init$1() {\n      var position = getOptions().credits.position || 'right';\n      var positionStyle = ['left', 'right'].indexOf(position) > -1 ? \"\".concat(position, \": 0;\") : '';\n      var waterMark = \"\\n        <div class=\\\"\".concat(WATERMARK, \"\\\" style=\\\"\").concat(positionStyle, \"\\\">\\n            <a href=\\\"https://alvarotrigo.com/fullPage/\\\" \\n                rel=\\\"nofollow noopener\\\" \\n                target=\\\"_blank\\\" \\n                style=\\\"text-decoration:none; color: #000;\\\">\\n                    \").concat(getOptions().credits.label || 'Made with fullPage.js', \"\\n            </a>\\n        </div>\\n    \");\n      var lastSection = getLast(state.sections);\n      var shouldUseWaterMark = !state.isValid || getOptions().credits.enabled;\n\n      if (lastSection && lastSection.item && shouldUseWaterMark) {\n        lastSection.item.insertAdjacentHTML('beforeend', waterMark);\n      }\n    }\n\n    !function () {\n      EventEmitter.on(events.onInitialise, function () {\n        var n, a, l;\n        setState({\n          isValid: (getOptions().licenseKey, n = getOptions().licenseKey, a = function (n) {\n            var e = parseInt(\"\\x35\\x31\\x34\").toString(16);\n            if (!n || n.length < 29 || 4 === n.split(t[0]).length) return null;\n            var r = [\"\\x45\\x61\\x63\\x68\", \"\\x66\\x6f\\x72\"][i()]().join(\"\"),\n                a = n[[\"\\x73\\x70\\x6c\\x69\\x74\"]](\"-\"),\n                l = [];\n            a[r](function (t, n) {\n              if (n < 4) {\n                var r = function (t) {\n                  var n = t[t.length - 1],\n                      e = [\"\\x4e\\x61\\x4e\", \"\\x69\\x73\"][i()]().join(\"\");\n                  return window[e](n) ? o(n) : function (t) {\n                    return t - ACTIVE.length;\n                  }(n);\n                }(t);\n\n                l.push(r);\n                var s = o(t[r]);\n\n                if (1 === n) {\n                  var a = [\"\\x70\\x61\", \"\\x64\\x53\", \"\\x74\", \"\\x61\\x72\\x74\"].join(\"\");\n                  s = s.toString()[a](2, \"0\");\n                }\n\n                e += s, 0 !== n && 1 !== n || (e += \"-\");\n              }\n            });\n            var f = 0,\n                m = \"\";\n            return n.split(\"-\").forEach(function (t, n) {\n              if (n < 4) {\n                var _i = 0;\n\n                for (var e = 0; e < 4; e++) {\n                  e !== l[n] && (_i += Math.abs(o(t[e])), isNaN(t[e]) || f++);\n                }\n\n                var r = s(_i);\n                m += r;\n              }\n            }), m += s(f), {\n              v: new Date(e + \"T00:00\"),\n              o: e.split(\"-\")[2] === 8 * (ACTIVE.length - 2) + \"\",\n              l: m\n            };\n          }(n), l = function (t) {\n            var n = r[i()]().join(\"\");\n            return t && 0 === n.indexOf(t) && t.length === n.length;\n          }(n) || function (t) {\n            return new RegExp(\"^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$\").test(t);\n          }(n), (a || l) && (a && e <= a.v && a.l === n.split(t[0])[4] || l || a.o) || !1)\n        });\n      });\n      var t = [\"-\"];\n      var n = \"\\x32\\x30\\x32\\x35\\x2d\\x35\\x2d\\x32\\x36\".split(\"-\"),\n          e = new Date(n[0], n[1], n[2]),\n          r = [\"se\", \"licen\", \"-\", \"v3\", \"l\", \"gp\"];\n\n      function i() {\n        return [[\"\\x72\\x65\", \"\\x76\\x65\\x72\\x73\\x65\"].join(\"\")][\"\".length];\n      }\n\n      function o(t) {\n        return t ? isNaN(t) ? t.charCodeAt(0) - 72 : t : \"\";\n      }\n\n      function s(t) {\n        var n = 72 + t;\n        return n > 90 && n < 97 && (n += 15), String.fromCharCode(n).toUpperCase();\n      }\n    }();\n\n    EventEmitter.on(events.onPerformMovement, onSlideOrScroll);\n    EventEmitter.on(events.afterSectionLoads, afterPanelLoad);\n    EventEmitter.on(events.onSlideLeave, onSlideOrScroll);\n    EventEmitter.on(events.afterSlideLoads, afterPanelLoad);\n\n    function onSlideOrScroll(params) {\n      var skipValue = getOptions().skipIntermediateItems;\n      var scrollType = params.items.origin.isSection ? 'sections' : 'slides';\n      var areConsecutivePanels = Math.abs(params.items.origin.index() - params.items.destination.index()) > 1;\n      var doesApply = (skipValue === true || skipValue === scrollType) && areConsecutivePanels;\n\n      if (doesApply) {\n        setScrollingSpeed(0, 'internal');\n      }\n    }\n\n    function afterPanelLoad(params) {\n      if (getOptions().skipIntermediateItems) {\n        setVariableState('scrollingSpeed', getOriginals().scrollingSpeed, 'internal');\n      }\n    }\n\n    //@ts-check\n    EventEmitter.on(events.beforeInit, beforeInit);\n    FP.setKeyboardScrolling = setKeyboardScrolling;\n\n    function beforeInit() {\n      setKeyboardScrolling(true);\n    }\n    /**\n    * Adds or remove the possibility of scrolling through sections by using the keyboard arrow keys\n    */\n\n\n    function setKeyboardScrolling(value, directions) {\n      if (typeof directions !== 'undefined') {\n        directions = directions.replace(/ /g, '').split(',');\n        directions.forEach(function (direction) {\n          setIsScrollAllowed(value, direction, 'k');\n        });\n      } else {\n        setIsScrollAllowed(value, 'all', 'k');\n        getOptions().keyboardScrolling = value;\n      }\n    }\n\n    /**\n    * Sets the data-anchor attributes to the menu elements and activates the current one.\n    */\n\n    function styleMenu(section) {\n      var index = section.index();\n\n      if (typeof getOptions().anchors[index] !== 'undefined') {\n        //activating the menu / nav element on load\n        if (section.isActive) {\n          activateMenuAndNav(getOptions().anchors[index], index);\n        }\n      } //moving the menu outside the main container if it is inside (avoid problems with fixed positions when using CSS3 tranforms)\n\n\n      if (getOptions().menu && getOptions().css3 && closest($(getOptions().menu)[0], WRAPPER_SEL) != null) {\n        $(getOptions().menu).forEach(function (menu) {\n          $body.appendChild(menu);\n        });\n      }\n    }\n\n    /**\n    * Works over the DOM structure to set it up for the current fullpage getOptions().\n    */\n\n    function prepareDom() {\n      css(getParentsUntil(getContainer(), 'body'), {\n        'height': '100%',\n        'position': 'relative'\n      }); //adding a class to recognize the container internally in the code\n\n      addClass(getContainer(), WRAPPER);\n      addClass($html, ENABLED); //due to https://github.com/alvarotrigo/fullPage.js/issues/1502\n\n      setState({\n        windowsHeight: getWindowHeight()\n      });\n      removeClass(getContainer(), DESTROYED); //in case it was destroyed before initializing it again\n\n      addInternalSelectors();\n      var sections = getState().sectionsIncludingHidden; //styling the sections / slides / menu\n\n      for (var i = 0; i < sections.length; i++) {\n        var section = sections[i];\n        var slides = section.allSlidesItems; //caching the original styles to add them back on destroy('all')\n\n        var originalStyles = getAttr(section.item, 'style');\n\n        if (originalStyles) {\n          section.item.setAttribute('data-fp-styles', originalStyles);\n        }\n\n        styleSection(section);\n        styleMenu(section); // if there's any slide\n\n        if (slides.length > 0) {\n          styleSlides(section);\n        }\n      } //fixed elements need to be moved out of the plugin container due to problems with CSS3.\n\n\n      if (getOptions().fixedElements && getOptions().css3) {\n        $(getOptions().fixedElements).forEach(function (item) {\n          $body.appendChild(item);\n        });\n      } //vertical centered of the navigation + active bullet\n\n\n      if (getOptions().navigation) {\n        addVerticalNavigation();\n      }\n\n      enableYoutubeAPI();\n\n      if (getOptions().scrollOverflow) {\n        scrollOverflowHandler.makeScrollable();\n      }\n    }\n\n    FP.shared.afterRenderActions = afterRenderActions;\n    /**\n    * Actions and callbacks to fire afterRender\n    */\n\n    function afterRenderActions() {\n      var section = getState().activeSection;\n      var sectionElem = getState().activeSection.item;\n      addClass(sectionElem, COMPLETELY);\n      lazyLoadPanels(getState().activeSection);\n      lazyLoadOthers();\n      playMedia(sectionElem);\n\n      if (isDestinyTheStartingSection() && isFunction(getOptions().afterLoad)) {\n        fireCallback('afterLoad', {\n          activeSection: sectionElem,\n          element: sectionElem,\n          direction: null,\n          //for backwards compatibility callback (to be removed in a future!)\n          anchorLink: section.anchor,\n          sectionIndex: section.index(),\n          items: {\n            origin: getState().activeSection,\n            destination: getState().activeSection\n          }\n        });\n      }\n\n      if (isFunction(getOptions().afterRender)) {\n        fireCallback('afterRender');\n      }\n    }\n    /**\n    * Determines if the URL anchor destiny is the starting section (the one using 'active' class before initialization)\n    */\n\n    function isDestinyTheStartingSection() {\n      var anchor = getAnchorsURL();\n      var destinationSection = getSectionByAnchor(anchor.section);\n      return !anchor.section || !destinationSection || typeof destinationSection !== 'undefined' && destinationSection.index() === index(getStartingSection());\n    }\n\n    FP.setAllowScrolling = setAllowScrolling;\n    /**\n    * Adds or remove the possibility of scrolling through sections by using the mouse wheel/trackpad or touch gestures.\n    * Optionally a second parameter can be used to specify the direction for which the action will be applied.\n    *\n    * @param directions string containing the direction or directions separated by comma.\n    */\n\n    function setAllowScrolling(value, directions) {\n      if (typeof directions !== 'undefined') {\n        directions = directions.replace(/ /g, '').split(',');\n        directions.forEach(function (direction) {\n          setIsScrollAllowed(value, direction, 'm');\n        });\n      } else {\n        setIsScrollAllowed(value, 'all', 'm');\n      }\n    }\n\n    /**\n    * Scrolls to the anchor in the URL when loading the site\n    */\n\n    function scrollToAnchor() {\n      var anchors = getAnchorsURL();\n      var sectionAnchor = anchors.section;\n      var slideAnchor = anchors.slide;\n\n      if (sectionAnchor) {\n        //if theres any #\n        if (getOptions().animateAnchor) {\n          scrollPageAndSlide(sectionAnchor, slideAnchor);\n        } else {\n          silentMoveTo(sectionAnchor, slideAnchor);\n        }\n      } else {\n        EventEmitter.emit(events.onAfterRenderNoAnchor, null);\n      }\n    }\n\n    /*\n    * Removes inline styles added by fullpage.js\n    */\n\n    function destroyStructure() {\n      //reseting the `top` or `translate` properties to 0\n      silentScroll(0); //loading all the lazy load content\n\n      $('img[data-src], source[data-src], audio[data-src], iframe[data-src]', getContainer()).forEach(function (item) {\n        setSrc(item, 'src');\n      });\n      $('img[data-srcset]').forEach(function (item) {\n        setSrc(item, 'srcset');\n      });\n      remove($(SECTION_NAV_SEL + ', ' + SLIDES_NAV_SEL + ', ' + SLIDES_ARROW_SEL + ', ' + WATERMARK_SEL)); //removing inline styles\n\n      css(getNodes(getState().sections), {\n        'height': '',\n        'background-color': '',\n        'padding': ''\n      });\n      css(getNodes(getState().slides), {\n        'width': ''\n      });\n      css(getContainer(), {\n        'height': '',\n        'position': '',\n        '-ms-touch-action': '',\n        'touch-action': ''\n      });\n      css($htmlBody, {\n        'overflow': '',\n        'height': ''\n      }); // remove .fp-enabled class\n\n      removeClass($html, ENABLED); // remove .fp-responsive class & .fp-scrollable\n\n      removeClass($body, RESPONSIVE + ' ' + SCROLLABLE); // remove all of the .fp-viewing- classes\n\n      $body.className.split(/\\s+/).forEach(function (className) {\n        if (className.indexOf(VIEWING_PREFIX) === 0) {\n          removeClass($body, className);\n        }\n      }); //removing added classes\n\n      getNodes(getState().panels).forEach(function (item) {\n        if (getOptions().scrollOverflow) {\n          scrollOverflowHandler.destroyWrapper(item);\n        }\n\n        removeClass(item, TABLE + ' ' + ACTIVE + ' ' + COMPLETELY + ' ' + IS_OVERFLOW + ' ' + LOADED);\n        var previousStyles = getAttr(item, 'data-fp-styles');\n\n        if (previousStyles) {\n          item.setAttribute('style', previousStyles);\n        } //removing anchors if they were not set using the HTML markup\n\n\n        if (hasClass(item, SECTION) && !getInitialAnchorsInDom()) {\n          item.removeAttribute('data-anchor');\n        }\n      }); //removing the applied transition from the fullpage wrapper\n\n      removeAnimation(getContainer()); //Unwrapping content\n\n      [TABLE_CELL_SEL, SLIDES_CONTAINER_SEL, SLIDES_WRAPPER_SEL].forEach(function (selector) {\n        $(selector, getContainer()).forEach(function (item) {\n          //unwrap not being use in case there's no child element inside and its just text\n          unwrap(item);\n        });\n      }); //removing the applied transition from the fullpage wrapper\n\n      css(getContainer(), {\n        '-webkit-transition': 'none',\n        'transition': 'none'\n      });\n      removeClass(getContainer(), WRAPPER); //scrolling the page to the top with no animation\n\n      win.scrollTo(0, 0); //removing selectors\n\n      var usedSelectors = [SECTION, SLIDE, SLIDES_CONTAINER];\n      usedSelectors.forEach(function (item) {\n        removeClass($('.' + item), item);\n      });\n      resetState();\n      EventEmitter.emit(events.onDestroyAll);\n    }\n\n    FP.destroy = destroy;\n    function init() {\n      updateStructuralState();\n      updateState();\n      getOptions().scrollBar = getOptions().scrollBar || getOptions().hybrid;\n      setOptionsFromDOM();\n      prepareDom();\n      setAllowScrolling(true);\n      setMouseHijack(true);\n      setAutoScrolling(getOptions().autoScrolling, 'internal');\n      responsive(); //setting the class for the body element\n\n      setBodyClass();\n\n      if (doc.readyState === 'complete') {\n        scrollToAnchor();\n      }\n\n      windowAddEvent('load', scrollToAnchor);\n      afterRenderActions(); // Updating the state again with the new DOM\n\n      updateStructuralState();\n      updateState();\n    }\n    /*\n    * Destroys fullpage.js plugin events and optinally its html markup and styles\n    */\n\n    function destroy(all) {\n      setAutoScrolling(false, 'internal');\n      setAllowScrolling(true);\n      setMouseHijack(false);\n      setKeyboardScrolling(false);\n      addClass(getContainer(), DESTROYED);\n      EventEmitter.emit(events.onDestroy); //lets make a mess!\n\n      if (all) {\n        destroyStructure();\n      }\n    }\n\n    var isOK = function isOK() {\n      return getOptions() && state.isValid || doc.domain.indexOf('al' + 'varotri' + 'go' + '.' + 'com') > -1;\n    };\n    /**\n    * Displays warnings\n    */\n\n\n    function displayWarnings() {\n      var l = getOptions()['li' + 'c' + 'enseK' + 'e' + 'y'];\n      var msgStyle = 'font-size: 15px;background:yellow;';\n\n      if (getOptions().licenseKey.trim() === '') {\n        showError('error', 'Fullpage.js requires a `licenseKey` option. Read about it on the following website:');\n        showError('error', 'https://alvarotrigo.com/fullPage/docs/#licensekey');\n      } else if (!isOK()) {\n        showError('error', 'Incorrect `licenseKey`. Get one for fullPage.js version 4 here:');\n        showError('error', 'https://alvarotrigo.com/fullPage/pricing');\n      } else if (l && l.length < 20) {\n        console.warn('%c This website was made using fullPage.js slider. Learn more on the following website:', msgStyle);\n        console.warn('%c https://alvarotrigo.com/fullPage/', msgStyle);\n      }\n\n      if (hasClass($html, ENABLED)) {\n        showError('error', 'Fullpage.js can only be initialized once and you are doing it multiple times!');\n        return;\n      } // Disable mutually exclusive settings\n\n\n      if (getOptions().continuousVertical && (getOptions().loopTop || getOptions().loopBottom)) {\n        getOptions().continuousVertical = false;\n        showError('warn', 'Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled');\n      }\n\n      if (getOptions().scrollOverflow && (getOptions().scrollBar || !getOptions().autoScrolling)) {\n        showError('warn', 'Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox');\n      }\n\n      if (getOptions().continuousVertical && (getOptions().scrollBar || !getOptions().autoScrolling)) {\n        getOptions().continuousVertical = false;\n        showError('warn', 'Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled');\n      } //using extensions? Wrong file!\n\n\n      extensions.forEach(function (extension) {\n        //is the option set to true?\n        if (getOptions()[extension]) {\n          showError('warn', 'fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: ' + extension);\n        }\n      }); //anchors can not have the same value as any element ID or NAME\n\n      getOptions().anchors.forEach(function (name) {\n        //case insensitive selectors (http://stackoverflow.com/a/19465187/1081396)\n        var nameAttr = [].slice.call($('[name]')).filter(function (item) {\n          return getAttr(item, 'name') && getAttr(item, 'name').toLowerCase() == name.toLowerCase();\n        });\n        var idAttr = [].slice.call($('[id]')).filter(function (item) {\n          return getAttr(item, 'id') && getAttr(item, 'id').toLowerCase() == name.toLowerCase();\n        });\n\n        if (idAttr.length || nameAttr.length) {\n          showError('error', 'data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).');\n          var propertyName = idAttr.length ? 'id' : 'name';\n\n          if (idAttr.length || nameAttr.length) {\n            showError('error', '\"' + name + '\" is is being used by another element `' + propertyName + '` property');\n          }\n        }\n      });\n    }\n\n    function fullpage(containerSelector, options) {\n      setCache(); //only once my friend!\n\n      if (hasClass($html, ENABLED)) {\n        displayWarnings();\n        return;\n      }\n\n      setOption('touchWrapper', typeof containerSelector === 'string' ? $(containerSelector)[0] : containerSelector); // Creating some defaults, extending them with any options that were provided\n\n      setOptions(options);\n      setContainer(typeof containerSelector === 'string' ? $(containerSelector)[0] : containerSelector);\n      EventEmitter.emit(events.onInitialise);\n      displayWarnings();\n      setAPI();\n\n      if (getContainer()) {\n        EventEmitter.emit(events.beforeInit);\n        init();\n        EventEmitter.emit(events.bindEvents);\n      }\n\n      setState({\n        isFullpageInitDone: true\n      }); // @ts-ignore\n\n      return win.fullpage_api;\n    }\n\n    function setAPI() {\n      FP.getFullpageData = function () {\n        return {\n          options: getOptions()\n        };\n      }; //public functions\n\n\n      FP.version = '4.0.37';\n      FP.test = Object.assign(FP.test, {\n        top: '0px',\n        translate3d: 'translate3d(0px, 0px, 0px)',\n        translate3dH: function () {\n          var a = [];\n\n          for (var i = 0; i < $(getOptions().sectionSelector, getContainer()).length; i++) {\n            a.push('translate3d(0px, 0px, 0px)');\n          }\n\n          return a;\n        }(),\n        left: function () {\n          var a = [];\n\n          for (var i = 0; i < $(getOptions().sectionSelector, getContainer()).length; i++) {\n            a.push(0);\n          }\n\n          return a;\n        }(),\n        options: getOptions(),\n        setAutoScrolling: null\n      }); //functions we want to share across files but which are not\n      //mean to be used on their own by developers\n\n      FP.shared = Object.assign(FP.shared, {\n        afterRenderActions: null,\n        isNormalScrollElement: false\n      }); // @ts-ignore\n\n      win.fullpage_api = FP;\n    }\n\n    // @ts-ignore\n\n    win.fp_easings = deepExtend(win.fp_easings, {\n      easeInOutCubic: function easeInOutCubic(t, b, c, d) {\n        if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;\n        return c / 2 * ((t -= 2) * t * t + 2) + b;\n      }\n    });\n\n    /**\n     * jQuery adapter for fullPage.js 3.0.0\n     */\n    // @ts-ignore\n\n    if (win.jQuery) {\n      (function ($, fullpage) {\n\n        if (!$ || !fullpage) {\n          showError('error', 'jQuery is required to use the jQuery fullpage adapter!');\n          return;\n        }\n\n        $.fn.fullpage = function (options) {\n          options = $.extend({}, options, {\n            '$': $\n          });\n          new fullpage(this[0], options); // Creating the $.fn.fullpage object\n\n          Object.keys(FP).forEach(function (key) {\n            getOptions().$.fn.fullpage[key] = FP[key];\n          });\n        }; // @ts-ignore\n\n      })(win.jQuery, fullpage);\n    }\n\n    return fullpage;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/fullpage.js/dist/fullpage.js\n"));

/***/ })

}]);